---
AWSTemplateFormatVersion: '2010-09-09'

Description: Zookeeper Cluster

Parameters:
  Cluster:
    Description: ECS Cluster
    Type: String
  StackName:
    Description: The Parent Stack Name
    Type: String
  VPCId:
    Description: Choose which VPC this cluster should be deployed to
    Type: AWS::EC2::VPC::Id
  DataVolumeMountPath:
    Description: Path to directory for mounting data
    Type: String
    MinLength: 1
    ConstraintDescription: Must be a valid folder path
  Subnets:
    Description: Choose three private subnets this cluster should be deployed to
    Type: List<AWS::EC2::Subnet::Id>
  ClientPort:
    Description: Zookeeper client port
    Type: Number
    Default: 2181
  PeerPortOne:
    Description: Zookeeper first peer port
    Type: Number
    Default: 2888
  PeerPortTwo:
    Description: Zookeeper second peer port
    Type: Number
    Default: 3888
  ServiceCpu:
    Description: CPU (1024 = 1 core)
    Type: Number
    Default: 896
  ServiceMemory:
    Description: Memory
    Type: Number
    Default: 4096
  JmxtransCpu:
    Description: CPU (1024 = 1 core)
    Type: Number
    Default: 128
  JmxtransMemory:
    Description: Memory
    Type: Number
    Default: 512
  InternalSG:
    Description: Security Group ID of the ECS Instances to allow JMX and client port ingress for this component
    Type: String
  Project:
    Description: Project tag
    Type: String
    MinLength: 1
    ConstraintDescription: Must be a non-empty string
  Team:
    Description: Team tag
    Type: String
    MinLength: 1
    ConstraintDescription: Must be a non-empty string
  Environment:
    Description: Environment (dev|sandbox|prod)
    Type: String
    AllowedValues: ['dev','sandbox','prod']
    Default: dev
    ConstraintDescription: Must be one of dev|sandbox|prod.
  DomainName:
    Description: >
      The domain under which the zookeeper node will register its advertised address.
      Note: This is the HostedZoneName without the period suffix.
    Type: String
  KinesisStackName:
    Type: String
    Description: Name of the CF stack used to create the Kinesis stream

Resources:
  ZKNodesLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '${StackName}/zk'
      RetentionInDays: 1
  SubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    DependsOn:
      - ZKNodesLogGroup
    Properties:
      RoleArn: !ImportValue
        Fn::Sub: ${KinesisStackName}-Role-Arn
      LogGroupName: !Ref 'ZKNodesLogGroup'
      FilterPattern: ''
      DestinationArn: !ImportValue
        Fn::Sub: ${KinesisStackName}-Stream-Arn

  ClientZKSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Sub '${AWS::StackName}-client-zk-sg'
      GroupDescription: Allows Client Access to Zookeeper Nodes
      VpcId: !Ref 'VPCId'
      Tags:
        - Key: Project
          Value: !Ref 'Project'
        - Key: Team
          Value: !Ref 'Team'
        - Key: Environment
          Value: !Ref 'Environment'
        - Key: Component
          Value: zookeeper
      SecurityGroupEgress:
        IpProtocol: -1
        CidrIp: "0.0.0.0/0"
  InternalZKSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Sub '${AWS::StackName}-internal-zk-sg'
      GroupDescription: Allows Internal Access to Zookeeper Nodes
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref 'ClientZKSG'
          IpProtocol: tcp
          FromPort: !Ref 'ClientPort'
          ToPort: !Ref 'ClientPort'
      VpcId: !Ref 'VPCId'
      Tags:
        - Key: Project
          Value: !Ref 'Project'
        - Key: Team
          Value: !Ref 'Team'
        - Key: Environment
          Value: !Ref 'Environment'
        - Key: Component
          Value: zookeeper
      SecurityGroupEgress:
        IpProtocol: -1
        CidrIp: "0.0.0.0/0"
    DependsOn: 'ClientZKSG'
  InternalZKSGIngressPeerOneRule:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      IpProtocol: tcp
      FromPort: !Ref 'PeerPortOne'
      ToPort: !Ref 'PeerPortOne'
      GroupId: !Ref 'InternalZKSG'
      SourceSecurityGroupId: !Ref 'InternalZKSG'
    DependsOn: 'InternalZKSG'
  InternalZKSGIngressPeerTwoRule:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      IpProtocol: tcp
      FromPort: !Ref 'PeerPortTwo'
      ToPort: !Ref 'PeerPortTwo'
      GroupId: !Ref 'InternalZKSG'
      SourceSecurityGroupId: !Ref 'InternalZKSG'
    DependsOn: 'InternalZKSG'
  InternalZKSGIngressJMXRule:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      IpProtocol: tcp
      FromPort: 8990
      ToPort: 8992
      GroupId: !Ref 'InternalZKSG'
      SourceSecurityGroupId: !Ref 'InternalZKSG'
  InternalSGIngressJMXRule:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      IpProtocol: tcp
      FromPort: 8990
      ToPort: 8992
      GroupId: !Ref 'InternalZKSG'
      SourceSecurityGroupId: !Ref 'InternalSG'
  InternalSGClientIngressRule:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      IpProtocol: tcp
      FromPort: !Ref 'ClientPort'
      ToPort: !Ref 'ClientPort'
      GroupId: !Ref 'InternalZKSG'
      SourceSecurityGroupId: !Ref 'InternalSG'
  ZKNode1:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: ./service.yaml
      Parameters:
        Cluster: !Ref 'Cluster'
        StackName: !Ref 'StackName'
        ServiceCpu: !Ref 'ServiceCpu'
        ServiceMemory: !Ref 'ServiceMemory'
        JmxtransCpu: !Ref 'JmxtransCpu'
        JmxtransMemory: !Ref 'JmxtransMemory'
        DataVolumeMountPath: !Ref 'DataVolumeMountPath'
        ServerId: 1
        ServerName: !Sub '${StackName}-zk1'
        ServerNames: !Sub '0.0.0.0:${PeerPortOne}:${PeerPortTwo};${StackName}-zk2.${DomainName}:${PeerPortOne}:${PeerPortTwo};${StackName}-zk3.${DomainName}:${PeerPortOne}:${PeerPortTwo}'
        ClientPort: !Ref 'ClientPort'
        PeerPortOne: !Ref 'PeerPortOne'
        PeerPortTwo: !Ref 'PeerPortTwo'
        LogGroup: !Ref 'ZKNodesLogGroup'
        SecurityGroup: !Ref 'InternalZKSG'
        SubnetId: !Select [ 0, !Ref 'Subnets' ]
        DomainName: !Ref 'DomainName'
        JMXPort: 8990
    DependsOn: ['ZKNodesLogGroup', 'InternalZKSG']
  ZKNode2:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: ./service.yaml
      Parameters:
        Cluster: !Ref 'Cluster'
        StackName: !Ref 'StackName'
        ServiceCpu: !Ref 'ServiceCpu'
        ServiceMemory: !Ref 'ServiceMemory'
        JmxtransCpu: !Ref 'JmxtransCpu'
        JmxtransMemory: !Ref 'JmxtransMemory'
        DataVolumeMountPath: !Ref 'DataVolumeMountPath'
        ServerId: 2
        ServerName: !Sub '${StackName}-zk2'
        ServerNames: !Sub '${StackName}-zk1.${DomainName}:${PeerPortOne}:${PeerPortTwo};0.0.0.0:${PeerPortOne}:${PeerPortTwo};${StackName}-zk3.${DomainName}:${PeerPortOne}:${PeerPortTwo}'
        ClientPort: !Ref 'ClientPort'
        PeerPortOne: !Ref 'PeerPortOne'
        PeerPortTwo: !Ref 'PeerPortTwo'
        LogGroup: !Ref 'ZKNodesLogGroup'
        SecurityGroup: !Ref 'InternalZKSG'
        SubnetId: !Select [ 1, !Ref 'Subnets' ]
        DomainName: !Ref 'DomainName'
        JMXPort: 8991
    DependsOn: ['ZKNodesLogGroup', 'InternalZKSG']
  ZKNode3:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: ./service.yaml
      Parameters:
        Cluster: !Ref 'Cluster'
        StackName: !Ref 'StackName'
        ServiceCpu: !Ref 'ServiceCpu'
        ServiceMemory: !Ref 'ServiceMemory'
        JmxtransCpu: !Ref 'JmxtransCpu'
        JmxtransMemory: !Ref 'JmxtransMemory'
        DataVolumeMountPath: !Ref 'DataVolumeMountPath'
        ServerId: 3
        ServerName: !Sub '${StackName}-zk3'
        ServerNames: !Sub '${StackName}-zk1.${DomainName}:${PeerPortOne}:${PeerPortTwo};${StackName}-zk2.${DomainName}:${PeerPortOne}:${PeerPortTwo};0.0.0.0:${PeerPortOne}:${PeerPortTwo}'
        ClientPort: !Ref 'ClientPort'
        PeerPortOne: !Ref 'PeerPortOne'
        PeerPortTwo: !Ref 'PeerPortTwo'
        LogGroup: !Ref 'ZKNodesLogGroup'
        SecurityGroup: !Ref 'InternalZKSG'
        SubnetId: !Select [ 2, !Ref 'Subnets' ]
        DomainName: !Ref 'DomainName'
        JMXPort: 8992
    DependsOn: ['ZKNodesLogGroup', 'InternalZKSG']

Outputs:
  ClientZKSG:
    Description: Allows Client Access to Zookeeper Nodes
    Value: !Ref 'ClientZKSG'
  ConnectionString:
    Description: Comma delimited list of zookeeper node addresses
    Value: !Sub
      - '${ZKNode1},${ZKNode2},${ZKNode3}'
      - ZKNode1: !GetAtt 'ZKNode1.Outputs.ConnectionString'
        ZKNode2: !GetAtt 'ZKNode2.Outputs.ConnectionString'
        ZKNode3: !GetAtt 'ZKNode3.Outputs.ConnectionString'
