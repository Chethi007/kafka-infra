---
AWSTemplateFormatVersion: '2010-09-09'

Description: Creates an ECS Kafka Service and Task

Parameters:
  Cluster:
    Description: ECS Cluster
    Type: String
  StackName:
    Description: The Parent Stack Name
    Type: String
  ServiceCpu:
    Description: CPU (1024 = 1 core)
    Type: Number
    Default: 896
  ServiceMemory:
    Description: Memory
    Type: Number
    Default: 4096
  JmxtransCpu:
    Description: CPU (1024 = 1 core)
    Type: Number
    Default: 128
  JmxtransMemory:
    Description: Memory
    Type: Number
    Default: 512
  DataVolumeMountPath:
    Description: Path to directory for mounting data
    Type: String
    MinLength: 1
    ConstraintDescription: Must be a valid folder path
  BrokerName:
    Description: The name of the broker. Used to register a dns entry in route53
    Type: String
  DomainName:
    Description: >
      The domain under which the broker will register its advertised address.
      Note: This is the HostedZoneName without the period suffix.
    Type: String
  ZookeeperConnectionString:
    Description: Connection string for Zookeeper Cluster
    Type: String
  ZookeeperSecurityGroup:
    Description: Security Group to allow access to ZK
    Type: String
  ClientPort:
    Description: Kafka client port
    Type: Number
    Default: 9092
  ClientSSLPort:
    Description: Kafka client SSL port
    Type: Number
    Default: 9093
  JMXPort:
    Description: JMX Port to expose metrics on
    Type: Number
    Default: 8989
  LogGroup:
    Description: Log Group
    Type: String
  SecurityGroup:
    Description: Security Group
    Type: AWS::EC2::SecurityGroup::Id
  SubnetId:
    Description: SubnetId
    Type: AWS::EC2::Subnet::Id
  EnableSSL:
    Description: Enables SSL protocol
    Type: String
    Default: 'yes'
    AllowedValues: ['yes', 'no']
    ConstraintDescription: Must be either 'yes' or 'no'
  EnablePlaintext:
    Description: Enables PLAINTEXT protocol
    Type: String
    Default: 'yes'
    AllowedValues: ['yes', 'no']
    ConstraintDescription: Must be either 'yes' or 'no'
  KmsDataKey:
    Description: >
      The KMS Data Key Ciphertext (Base64 encoded). If this is not provided the password parameters
      will be treated as plaintext.
    Type: String
    NoEcho: true
    Default: ''
  KeyPass:
    Description: >
      Password for the broker key. If KmsDataKey is provided, this should be the Base64 encoded;
      otherwise set it to the plaintext password (not recommended).
    Type: String
    NoEcho: true
    Default: ''
  KeystorePass:
    Description: >
      Password for the broker keystore. If KmsDataKey is provided, this should be the Base64 encoded;
      otherwise set it to the plaintext password (not recommended).
    Type: String
    NoEcho: true
    Default: ''
  TruststorePass:
    Description: >
      Password for the broker truststore. If KmsDataKey are provided, this should be the Base64 encoded;
      otherwise set it to the plaintext password (not recommended).
    Type: String
    NoEcho: true
    Default: ''

Resources:
  BrokerNodeTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Name: broker
          Image: loyaltyone/kafka:0.2.0
          Cpu: !Ref 'ServiceCpu'
          MemoryReservation: !Ref 'ServiceMemory'
          User: root
          DockerLabels:
            'discovery.service.name': !Ref 'BrokerName'
          Environment:
            - Name: NODE_ID_FILE_PATH
              Value: '/var/lib/kafka/node/id'
            - Name: KAFKA_ZOOKEEPER_CONNECT
              Value: !Ref 'ZookeeperConnectionString'
            - Name: ENABLE_SSL
              Value: !Ref 'EnableSSL'
            - Name: ENABLE_PLAINTEXT
              Value: !Ref 'EnablePlaintext'
            - Name: SSL_LISTENER
              Value: !Sub 'SSL://${BrokerName}.${DomainName}:${ClientSSLPort}'
            - Name: PLAINTEXT_LISTENER
              Value: !Sub 'PLAINTEXT://${BrokerName}.${DomainName}:${ClientPort}'
            - Name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
              Value: 2
            - Name: KAFKA_JMX_HOSTNAME
              Value: 'localhost'
            - Name: KAFKA_JMX_PORT
              Value: !Ref 'JMXPort'
            - Name: KAFKA_LOG4J_LOGGERS
              Value: 'kafka.controller=WARN,state.change.logger=WARN'
            - Name: SSL_DIR
              Value: '/var/private/ssl'
            - Name: KMS_DATA_KEY
              Value: !Ref 'KmsDataKey'
            - Name: KAFKA_SSL_KEY_PASSWORD
              Value: !Ref 'KeyPass'
            - Name: KAFKA_SSL_KEY_CREDENTIALS
              Value: 'broker_sslkey_creds'
            - Name: KAFKA_SSL_KEYSTORE_LOCATION
              Value: '/var/private/ssl/kafka.keystore.jks'
            - Name: KAFKA_SSL_KEYSTORE_FILENAME
              Value: 'kafka.keystore.jks'
            - Name: KAFKA_SSL_KEYSTORE_PASSWORD
              Value: !Ref 'KeystorePass'
            - Name: KAFKA_SSL_KEYSTORE_CREDENTIALS
              Value: 'broker_keystore_creds'
            - Name: KAFKA_SSL_TRUSTSTORE_LOCATION
              Value: '/var/private/ssl/kafka.truststore.jks'
            - Name: KAFKA_SSL_TRUSTSTORE_FILENAME
              Value: 'kafka.truststore.jks'
            - Name: KAFKA_SSL_TRUSTSTORE_PASSWORD
              Value: !Ref 'TruststorePass'
            - Name: KAFKA_SSL_TRUSTSTORE_CREDENTIALS
              Value: 'broker_truststore_creds'
            - Name: KAFKA_SECURITY_INTER_BROKER_PROTOCOL
              Value: 'SSL'
            - Name: KAFKA_SSL_CLIENT_AUTH
              Value: 'required'
            - Name: KAFKA_SSL_SECURE_RANDOM_IMPLEMENTATION
              Value: 'SHA1PRNG'
            - Name: KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM
              Value: 'HTTPS'
            - Name: KAFKA_LOG4J_LOGGERS
              Value: 'kafka.network.RequestChannel=WARN'
            - Name: KAFKA_LOG4J_ROOT_LOGLEVEL
              Value: 'INFO, stdout'
            - Name: KAFKA_TOOLS_LOG4J_LOGLEVEL
              Value: 'WARN, stderr'
            - Name: REGION
              Value: !Ref 'AWS::Region'
          PortMappings:
            - ContainerPort: !Ref 'ClientPort'
              HostPort: !Ref 'ClientPort'
            - ContainerPort: !Ref 'ClientSSLPort'
              HostPort: !Ref 'ClientSSLPort'
            - ContainerPort: !Ref 'JMXPort'
              HostPort: !Ref 'JMXPort'
          MountPoints:
            - SourceVolume: data
              ContainerPath: /var/lib/kafka/data
            - SourceVolume: secrets
              ContainerPath: /etc/kafka/secrets
            - SourceVolume: ssl
              ContainerPath: /var/private/ssl
            - SourceVolume: node
              ContainerPath: /var/lib/kafka/node
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref 'LogGroup'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: !Ref 'BrokerName'
        - Name: jmxtrans
          Image: loyaltyone/jmxtrans:0.2.0
          Cpu: !Ref 'JmxtransCpu'
          MemoryReservation: !Ref 'JmxtransMemory'
          Environment:
            - Name: SECONDS_BETWEEN_RUNS
              Value: 60
            - Name: JMXTRANS_ENV
              Value: aws
            - Name: JMXTRANS_HOSTS
              Value: !Sub 'kafka#localhost:${JMXPort}'
            - Name: JMXTRANS_ALIASES
              Value: !Sub '${BrokerName}.${DomainName}'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref 'LogGroup'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: !Ref 'BrokerName'
      Volumes:
        # It's probably not a good idea to change these mounts and deploy against a live
        # cluster in production.
        - Name: data
          Host:
            SourcePath: !Sub '${DataVolumeMountPath}/${BrokerName}/data'
        - Name: secrets
          Host:
            SourcePath: !Sub '${DataVolumeMountPath}/${BrokerName}/secrets'
        - Name: ssl
          Host:
            SourcePath: !Sub '${DataVolumeMountPath}/ssl'
        - Name: node
          Host:
            SourcePath: !Sub '${DataVolumeMountPath}/node'
      Family: !Ref 'BrokerName'
  BrokerNodeService:
    Type: 'AWS::ECS::Service'
    Properties:
      ServiceName: !Ref 'BrokerName'
      Cluster: !Ref 'Cluster'
      DesiredCount: 1
      TaskDefinition: !Ref 'BrokerNodeTaskDefinition'
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
             - !Ref 'SecurityGroup'
             - !Ref 'ZookeeperSecurityGroup'
          Subnets:
             - !Ref 'SubnetId'
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

Outputs:
  ConnectionString:
    Description: The connection string for this broker
    Value: !Sub '${BrokerName}.${DomainName}:${ClientPort}'
  SSLConnectionString:
    Description: The SSL connection string for this broker
    Value: !Sub '${BrokerName}.${DomainName}:${ClientSSLPort}'
