---
AWSTemplateFormatVersion: '2010-09-09'

Description: Kafka Cluster

Parameters:
  Cluster:
    Description: ECS Cluster
    Type: String
  StackName:
    Description: The Parent Stack Name
    Type: String
  VPCId:
    Description: Choose which VPC this cluster should be deployed to
    Type: AWS::EC2::VPC::Id
  DataVolumeMountPath:
    Description: Path to directory for mounting data
    Type: String
    MinLength: 1
    ConstraintDescription: Must be a valid folder path
  Subnets:
    Description: Choose three private subnets this cluster should be deployed to
    Type: List<AWS::EC2::Subnet::Id>
  ClientPort:
    Description: Kafka client port
    Type: Number
    Default: 9092
  ClientSSLPort:
    Description: Kafka client SSL port
    Type: Number
    Default: 9093
  ZookeeperConnectionString:
    Description: Connection string for Zookeeper Cluster
    Type: String
  ZookeeperSecurityGroup:
    Description: Security Group to allow access to ZK
    Type: String
  InternalSG:
    Description: Security Group ID of the ECS Instances to allow JMX and client port ingress for this component
    Type: String
  ServiceCpu:
    Description: CPU (1024 = 1 core)
    Type: Number
    Default: 896
  ServiceMemory:
    Description: Memory
    Type: Number
    Default: 4096
  JmxtransCpu:
    Description: CPU (1024 = 1 core)
    Type: Number
    Default: 128
  JmxtransMemory:
    Description: Memory
    Type: Number
    Default: 512
  Project:
    Description: Project tag
    Type: String
    MinLength: 1
    ConstraintDescription: Must be a non-empty string
  Team:
    Description: Team tag
    Type: String
    MinLength: 1
    ConstraintDescription: Must be a non-empty string
  Environment:
    Description: Environment (dev|sandbox|prod)
    Type: String
    AllowedValues: ['dev','sandbox','prod']
    Default: dev
    ConstraintDescription: Must be one of dev|sandbox|prod.
  DomainName:
    Description: >
      The domain under which the broker will register its advertised address.
      Note: This is the HostedZoneName without the period suffix.
    Type: String
  KinesisStackName:
    Type: String
    Description: Name of the CF stack used to create the Kinesis stream
  KafkaKeyPass:
    Description: Password for the kafka keystore
    Type: String
    NoEcho: true
    Default: ''
  KafkaTrustPass:
    Description: Password for the kafka keystore
    Type: String
    NoEcho: true
    Default: ''
Resources:
  BrokersLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '${StackName}/kafka'
      RetentionInDays: 1
  SubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    DependsOn:
      - BrokersLogGroup
    Properties:
      RoleArn: !ImportValue
        Fn::Sub: ${KinesisStackName}-Role-Arn
      LogGroupName: !Ref 'BrokersLogGroup'
      FilterPattern: ''
      DestinationArn: !ImportValue
        Fn::Sub: ${KinesisStackName}-Stream-Arn

  ClientKafkaSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Sub '${AWS::StackName}-client-kafka-sg'
      GroupDescription: Allows Client Access to Kafka Brokers
      VpcId: !Ref 'VPCId'
      Tags:
        - Key: Project
          Value: !Ref 'Project'
        - Key: Team
          Value: !Ref 'Team'
        - Key: Environment
          Value: !Ref 'Environment'
        - Key: Component
          Value: kafka
      SecurityGroupEgress:
        IpProtocol: -1
        CidrIp: "0.0.0.0/0"
  InternalKafkaSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Sub '${AWS::StackName}-internal-kafka-sg'
      GroupDescription: Allows Internal Access to Kafka Brokers
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref 'ClientKafkaSG'
          IpProtocol: tcp
          FromPort: !Ref 'ClientPort'
          ToPort: !Ref 'ClientPort'
        - SourceSecurityGroupId: !Ref 'ClientKafkaSG'
          IpProtocol: tcp
          FromPort: !Ref 'ClientSSLPort'
          ToPort: !Ref 'ClientSSLPort'
      VpcId: !Ref 'VPCId'
      Tags:
        - Key: Project
          Value: !Ref 'Project'
        - Key: Team
          Value: !Ref 'Team'
        - Key: Environment
          Value: !Ref 'Environment'
        - Key: Component
          Value: kafka
      SecurityGroupEgress:
        IpProtocol: -1
        CidrIp: "0.0.0.0/0"
    DependsOn: 'ClientKafkaSG'
  InternalKafkaSGIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      IpProtocol: tcp
      FromPort: !Ref 'ClientPort'
      ToPort: !Ref 'ClientPort'
      GroupId: !Ref 'InternalKafkaSG'
      SourceSecurityGroupId: !Ref 'InternalKafkaSG'
    DependsOn: 'InternalKafkaSG'
  InternalSSLKafkaSGIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      IpProtocol: tcp
      FromPort: !Ref 'ClientSSLPort'
      ToPort: !Ref 'ClientSSLPort'
      GroupId: !Ref 'InternalKafkaSG'
      SourceSecurityGroupId: !Ref 'InternalKafkaSG'
    DependsOn: 'InternalKafkaSG'
  InternalKafkaSGIngressJMXRule:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      IpProtocol: tcp
      FromPort: 8990
      ToPort: 8992
      GroupId: !Ref 'InternalKafkaSG'
      SourceSecurityGroupId: !Ref 'InternalKafkaSG'
  InternalSGIngressJMXRule:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      IpProtocol: tcp
      FromPort: 8990
      ToPort: 8992
      GroupId: !Ref 'InternalKafkaSG'
      SourceSecurityGroupId: !Ref 'InternalSG'
  InternalSGClientIngressRule:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      IpProtocol: tcp
      FromPort: !Ref 'ClientPort'
      ToPort: !Ref 'ClientPort'
      GroupId: !Ref 'InternalKafkaSG'
      SourceSecurityGroupId: !Ref 'InternalSG'
  InternalSGClientSSLIngressRule:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      IpProtocol: tcp
      FromPort: !Ref 'ClientSSLPort'
      ToPort: !Ref 'ClientSSLPort'
      GroupId: !Ref 'InternalKafkaSG'
      SourceSecurityGroupId: !Ref 'InternalSG'
  Broker1:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: ./service.yaml
      Parameters:
        Cluster: !Ref 'Cluster'
        StackName: !Ref 'StackName'
        ServiceCpu: !Ref 'ServiceCpu'
        ServiceMemory: !Ref 'ServiceMemory'
        JmxtransCpu: !Ref 'JmxtransCpu'
        JmxtransMemory: !Ref 'JmxtransMemory'
        DataVolumeMountPath: !Ref 'DataVolumeMountPath'
        ZookeeperConnectionString: !Ref 'ZookeeperConnectionString'
        ZookeeperSecurityGroup: !Ref 'ZookeeperSecurityGroup'
        BrokerId: 1
        BrokerName: !Sub '${StackName}-broker'
        DomainName: !Ref 'DomainName'
        ClientPort: !Ref 'ClientPort'
        ClientSSLPort: !Ref 'ClientSSLPort'
        LogGroup: !Ref 'BrokersLogGroup'
        SecurityGroup: !Ref 'InternalKafkaSG'
        SubnetId: !Select [ 0, !Ref 'Subnets' ]
        JMXPort: 8990
        KafkaKeyPass: !Ref 'KafkaKeyPass'
        KafkaTrustPass: !Ref 'KafkaTrustPass'
    DependsOn: ['BrokersLogGroup', 'InternalKafkaSG']
  Broker2:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: ./service.yaml
      Parameters:
        Cluster: !Ref 'Cluster'
        StackName: !Ref 'StackName'
        ServiceCpu: !Ref 'ServiceCpu'
        ServiceMemory: !Ref 'ServiceMemory'
        JmxtransCpu: !Ref 'JmxtransCpu'
        JmxtransMemory: !Ref 'JmxtransMemory'
        DataVolumeMountPath: !Ref 'DataVolumeMountPath'
        ZookeeperConnectionString: !Ref 'ZookeeperConnectionString'
        ZookeeperSecurityGroup: !Ref 'ZookeeperSecurityGroup'
        BrokerId: 2
        BrokerName: !Sub '${StackName}-broker'
        DomainName: !Ref 'DomainName'
        ClientPort: !Ref 'ClientPort'
        ClientSSLPort: !Ref 'ClientSSLPort'
        LogGroup: !Ref 'BrokersLogGroup'
        SecurityGroup: !Ref 'InternalKafkaSG'
        SubnetId: !Select [ 1, !Ref 'Subnets' ]
        JMXPort: 8991
        KafkaKeyPass: !Ref 'KafkaKeyPass'
        KafkaTrustPass: !Ref 'KafkaTrustPass'
    DependsOn: ['BrokersLogGroup', 'InternalKafkaSG']
  Broker3:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: ./service.yaml
      Parameters:
        Cluster: !Ref 'Cluster'
        StackName: !Ref 'StackName'
        ServiceCpu: !Ref 'ServiceCpu'
        ServiceMemory: !Ref 'ServiceMemory'
        JmxtransCpu: !Ref 'JmxtransCpu'
        JmxtransMemory: !Ref 'JmxtransMemory'
        DataVolumeMountPath: !Ref 'DataVolumeMountPath'
        ZookeeperConnectionString: !Ref 'ZookeeperConnectionString'
        ZookeeperSecurityGroup: !Ref 'ZookeeperSecurityGroup'
        BrokerId: 3
        BrokerName: !Sub '${StackName}-broker'
        DomainName: !Ref 'DomainName'
        ClientPort: !Ref 'ClientPort'
        ClientSSLPort: !Ref 'ClientSSLPort'
        LogGroup: !Ref 'BrokersLogGroup'
        SecurityGroup: !Ref 'InternalKafkaSG'
        SubnetId: !Select [ 2, !Ref 'Subnets' ]
        JMXPort: 8992
        KafkaKeyPass: !Ref 'KafkaKeyPass'
        KafkaTrustPass: !Ref 'KafkaTrustPass'
    DependsOn: ['BrokersLogGroup', 'InternalKafkaSG']

Outputs:
  ClientKafkaSG:
    Description: Allows Client Access to Kafka Brokers
    Value: !Ref 'ClientKafkaSG'
  ConnectionString:
    Description: Connection string to connect to kafka brokers
    Value: !Sub
      - '${Broker1},${Broker2},${Broker3}'
      - Broker1: !GetAtt 'Broker1.Outputs.ConnectionString'
        Broker2: !GetAtt 'Broker2.Outputs.ConnectionString'
        Broker3: !GetAtt 'Broker3.Outputs.ConnectionString'
  SSLConnectionString:
    Description: SSL connection string to connect to kafka brokers
    Value: !Sub
      - '${Broker1},${Broker2},${Broker3}'
      - Broker1: !GetAtt 'Broker1.Outputs.SSLConnectionString'
        Broker2: !GetAtt 'Broker2.Outputs.SSLConnectionString'
        Broker3: !GetAtt 'Broker3.Outputs.SSLConnectionString'
  ServiceSSLConnectionString:
    Description: SSL connection string to connect to kafka brokers, with each address prefaced by "SSL://" - this format is required for Rest Proxy and Schema Registry
    Value: !Sub
      - 'SSL://${Broker1},SSL://${Broker2},SSL://${Broker3}'
      - Broker1: !GetAtt 'Broker1.Outputs.SSLConnectionString'
        Broker2: !GetAtt 'Broker2.Outputs.SSLConnectionString'
        Broker3: !GetAtt 'Broker3.Outputs.SSLConnectionString'
