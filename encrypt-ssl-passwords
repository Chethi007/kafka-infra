#!/bin/bash -e

[[ "${DEBUG}" == 'true' ]] && set -o xtrace

prg=$0
function usage() {
    echo "Usage:"
    s="  $prg"
    s="${s} --kms-key-id=<id>"
    s="${s} --broker-key-pass=<password>"
    s="${s} --broker-keystore-pass=<password>"
    s="${s} --broker-truststore-pass=<password>"
    s="${s} --services-key-pass=<password>"
    s="${s} --services-keystore-pass=<password>"
    s="${s} --services-truststore-pass=<password>"
    s="${s} --config-path=<path to config>"
    echo "${s}"
}

# Parse command line arguments
for i in "$@"; do
  case $i in
    -h)
      usage
      exit 0
      ;;
    --kms-key-id=*)
      kms_key_id="${i#*=}"
      shift
      ;;
    --broker-key-pass=*)
      broker_key_pass="${i#*=}"
      shift
      ;;
    --broker-keystore-pass=*)
      broker_keystore_pass="${i#*=}"
      shift
      ;;
    --broker-truststore-pass=*)
      broker_truststore_pass="${i#*=}"
      shift
      ;;
    --services-key-pass=*)
      services_key_pass="${i#*=}"
      shift
      ;;
    --services-keystore-pass=*)
      services_keystore_pass="${i#*=}"
      shift
      ;;
    --services-truststore-pass=*)
      services_truststore_pass="${i#*=}"
      shift
      ;;
    --config-path=*)
      config_path="${i#*=}"
      shift
      ;;
    *)
      echo "ERROR: Unkown option $i"
      usage
      exit 1
      ;;
  esac
done

# Check parameters
parse_errors=()
if [[ -z ${kms_key_id} ]]; then
  parse_errors+=("ERROR: Please specify --kms-key-id")
fi
if [[ -z ${broker_key_pass} ]]; then
  parse_errors+=("ERROR: Please specify --broker-key-pass")
fi
if [[ -z ${broker_keystore_pass} ]]; then
  parse_errors+=("ERROR: Please specify --broker-keystore-pass")
fi
if [[ -z ${broker_truststore_pass} ]]; then
  parse_errors+=("ERROR: Please specify --broker-truststore-pass")
fi
if [[ -z ${services_key_pass} ]]; then
  parse_errors+=("ERROR: Please specify --services-key-pass")
fi
if [[ -z ${services_keystore_pass} ]]; then
  parse_errors+=("ERROR: Please specify --services-keystore-pass")
fi
if [[ -z ${services_truststore_pass} ]]; then
  parse_errors+=("ERROR: Please specify --services-truststore-pass")
fi
if [[ -z ${config_path} ]]; then
  parse_errors+=("ERROR: Please specify --config-path")
else
  eval config_path=$config_path
fi
if [[ ${#parse_errors[@]} -gt 0 ]]; then
  for parse_error in "${parse_errors[@]}"; do
    echo "$parse_error"
  done
  usage
  exit 1
fi

# See if data key exists
kms_data_key_ciphertext=$(jq -r '.Parameters.KmsDataKey' ../kafka-infra-config/dev-master-params.json)
if [[ -z ${kms_data_key_ciphertext} ]] || [[ "${kms_data_key_ciphertext}"=="null" ]]; then
    echo "Creating a new data key..."
    kms_data_key_json=$(aws kms generate-data-key --key-id ${kms_key_id} --key-spec AES_256)
    kms_data_key_plaintext=$(echo ${kms_data_key_json} | jq -r '.Plaintext')
    kms_data_key_ciphertext=$(echo ${kms_data_key_json} | jq -r '.CiphertextBlob')
else
    echo "Decoding data key..."
    kms_data_key_plaintext=$(aws kms decrypt \
        --ciphertext-blob fileb://<(echo ${kms_data_key_ciphertext} | base64 -D) \
        --query Plaintext --output text)
fi

# Use KMS data key to encrypt and then base64 encode
echo "Encoding broker key password..."
encoded_broker_key_pass=$(openssl enc -e -aes256 \
    -k <(echo "${kms_data_key_plaintext}") \
    -in <(echo "${broker_key_pass}") | base64)

echo "Encoding broker keystore password..."
encoded_broker_keystore_pass=$(openssl enc -e -aes256 \
    -k <(echo "${kms_data_key_plaintext}") \
    -in <(echo "${broker_keystore_pass}") | base64)

echo "Encoding broker truststore password..."
encoded_broker_truststore_pass=$(openssl enc -e -aes256 \
    -k <(echo "${kms_data_key_plaintext}") \
    -in <(echo "${broker_truststore_pass}") | base64)

echo "Encoding services key password..."
encoded_services_key_pass=$(openssl enc -e -aes256 \
    -k <(echo "${kms_data_key_plaintext}") \
    -in <(echo "${services_key_pass}") | base64)

echo "Encoding services keystore password..."
encoded_services_keystore_pass=$(openssl enc -e -aes256 \
    -k <(echo "${kms_data_key_plaintext}") \
    -in <(echo "${services_keystore_pass}") | base64)

echo "Encoding services truststore password..."
encoded_services_truststore_pass=$(openssl enc -e -aes256 \
    -k <(echo "${kms_data_key_plaintext}") \
    -in <(echo "${services_truststore_pass}") | base64)

# Write back to config file
echo "Writing configuration file '${config_path}'..."
output=$(cat ${config_path} | \
    jq ".Parameters.KmsDataKey = \"${kms_data_key_ciphertext}\"" | \
    jq ".Parameters.KafkaKeyPass = \"${encoded_broker_key_pass}\"" | \
    jq ".Parameters.KafkaKeystorePass = \"${encoded_broker_keystore_pass}\"" | \
    jq ".Parameters.KafkaTruststorePass = \"${encoded_broker_truststore_pass}\"" | \
    jq ".Parameters.ServicesKeyPass = \"${encoded_services_key_pass}\"" | \
    jq ".Parameters.ServicesKeystorePass = \"${encoded_services_keystore_pass}\"" | \
    jq ".Parameters.ServicesTruststorePass = \"${encoded_services_truststore_pass}\"" \
    )

echo "${output}" > ${config_path}