#!/usr/bin/env bash

#set -o errexit
#set -o pipefail
[[ "${DEBUG}" == 'true' ]] && set -o xtrace

readonly CFNS=$(grep \
    --exclude=deploy_master_stack \
    --exclude=deploy_services_stack \
    --exclude=master-template.yaml \
    --exclude=master.yaml \
    --exclude=services.yaml \
    --exclude-dir={.idea,kafka-connect,kafka-rest,schema-registry,jmxtrans} \
    -rnwl . -e 'AWSTemplateFormatVersion')

for cfn in ${CFNS}; do
    echo "Validating template ${cfn}"
    ERRORS=$(aws cloudformation validate-template --template-body file://${cfn} | jq .Error)

    if [ "${ERRORS}" != "null" ]; then
        echo "${cfn} has errors: ${ERRORS}" && exit 1
    fi
done

echo "Packaging services template"
aws cloudformation package --template-file services-template.yaml \
    --s3-bucket loyaltyone-"${ENV:-dev}"-infra --s3-prefix kafka --force-upload \
    --output-template-file services.yaml

echo "Deploying services template"
params=$(jq -r '.[] | "\(.ParameterKey)=\(.ParameterValue)"' ../kafka-infra-config/dev-services-params.json | tr '\n' ' ')
aws cloudformation deploy --template-file services.yaml --stack-name "${ENV:-dev}"-kafka-services --capabilities CAPABILITY_IAM \
  --parameter-overrides $params

# aws cloudformation describe-stack-events --stack-name "${ENV:-dev}"-kafka --output table

echo "Cleaning up"
rm -rf services.yaml

echo "Deployed stack successfully"
