AWSTemplateFormatVersion: '2010-09-09'
Description: Creates a service / task def for schema registry
Parameters:
  Priority:
    Type: Number
    Description: The priority to register with the Load Balancer
  UIPriority:
    Type: Number
    Description: The priority to register with the Load Balancer for Schema Registry
      UI
  AppName:
    Type: String
    Description: Name of app. Should be the same as docker repository name.
    Default: cp-schema-registry
  AppContainerPort:
    Type: Number
    Description: Port the app runs on in the image
    Default: '8081'
  Memory:
    Type: Number
    Description: Soft memory on container
    Default: '1280'
  Cpu:
    Type: Number
    Description: cpu units on container
    Default: '100'
  AppDesiredCount:
    Type: Number
    Description: Number of instances of the service to run
    Default: '1'
  UIDesiredCount:
    Type: Number
    Description: Number of instances of the service to run
    Default: '1'
  AppMaxCount:
    Type: Number
    Description: Max number of instances of the service to scale out to
    Default: '3'
  AppMinCount:
    Type: Number
    Description: Min number of instances of the service to scale in to
    Default: '1'
  AutoScaleHighThreshold:
    Type: Number
    Description: Percentage of service memory utilization that is considered high
    Default: '55'
  AutoScaleLowThreshold:
    Type: Number
    Description: Percentage of service memory utilization that is considered low
    Default: '15'
  LogRetention:
    Type: Number
    Description: Number of days to retain logs in CWL
    Default: '14'
  KinesisStackName:
    Type: String
    Description: Name of the CF stack used to create the Kinesis stream
  HostedZoneStackName:
    Type: String
    Description: The Hosted Zone stack name to create the service's record set in
  Listener:
    Description: ARN of the listener
    Type: String
  VpcId:
    Description: Choose which VPC this cluster should be deployed to
    Type: AWS::EC2::VPC::Id
  EcsServiceRole:
    Description: The Service role used by ECS
    Type: String
  ECSClusterName:
    Description: Name of ECS cluster to create the service in
    Type: String
  LoadBalancerCanonicalHostedZoneID:
    Description: Hosted Zone ID for the load balancer
    Type: String
  LoadBalancerDNSName:
    Description: Load balancer DNS name
    Type: String

Resources:
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthCheckPath: !Sub '/subjects'
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200-299
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '300'
      UnhealthyThresholdCount: 3
      VpcId: !Ref 'VpcId'
      Tags:
        - Key: Name
          Value: !Sub 'ECS Target Group - ${AWS::StackName}'
  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref 'Listener'
      Priority: !Ref 'Priority'
      Conditions:
        - Field: host-header
          Values:
            - !Ref 'DNSRecord'
      Actions:
        - TargetGroupArn: !Ref 'TargetGroup'
          Type: forward
  TargetGroupUI:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthCheckPath: !Sub '/'
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200-299
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '300'
      UnhealthyThresholdCount: 3
      VpcId: !Ref 'VpcId'
      Tags:
        - Key: Name
          Value: !Sub 'ECS Target Group - ${AWS::StackName} - UI'
  ListenerRuleUI:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref 'Listener'
      Priority: !Ref 'UIPriority'
      Conditions:
        - Field: host-header
          Values:
            - !Ref 'DNSRecordUI'
      Actions:
        - TargetGroupArn: !Ref 'TargetGroupUI'
          Type: forward
  EcsTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies: []
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: !Ref 'AppName'
          Image: loyaltyone/cp-schema-registry:0.1-beta
          Cpu: !Ref 'Cpu'
          PortMappings:
            - ContainerPort: !Ref 'AppContainerPort'
              HostPort: 0
          MemoryReservation: !Ref 'Memory'
          Essential: 'true'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref 'LogGroup'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: ecs
      Volumes: []
      Family: !Ref 'AWS::StackName'
      TaskRoleArn: !Ref 'EcsTaskRole'
  Service:
    Type: AWS::ECS::Service
    DependsOn:
      - ListenerRule
      - LogGroup
    Properties:
      ServiceName: !Ref 'AppName'
      Role: !Ref 'EcsServiceRole'
      TaskDefinition: !Ref 'TaskDefinition'
      DesiredCount: !Ref 'AppDesiredCount'
      LoadBalancers:
        - TargetGroupArn: !Ref 'TargetGroup'
          ContainerPort: !Ref 'AppContainerPort'
          ContainerName: !Ref 'AppName'
      Cluster: !Ref 'ECSClusterName'
      PlacementStrategies:
        - Field: attribute:ecs.availability-zone
          Type: spread
        - Field: instanceId
          Type: spread
  TaskDefinitionUI:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: !Sub '${AppName}-ui'
          Image: !Sub 'landoop/schema-registry-ui'
          Cpu: '100'
          PortMappings:
            - ContainerPort: 8000
              HostPort: 0
          Environment:
            - Name: SCHEMAREGISTRY_URL
              Value: !Sub 'https://${DNSRecordUI}'
          MemoryReservation: '512'
          Essential: 'true'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref 'LogGroup'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: ecs
      Volumes: []
      Family: !Ref 'AWS::StackName'
      TaskRoleArn: !Ref 'EcsTaskRole'
  ServiceUI:
    Type: AWS::ECS::Service
    DependsOn:
      - ListenerRuleUI
      - LogGroup
    Properties:
      ServiceName: !Sub '${AppName}-UI'
      Role: !Ref 'EcsServiceRole'
      TaskDefinition: !Ref 'TaskDefinitionUI'
      DesiredCount: !Ref 'UIDesiredCount'
      LoadBalancers:
        - TargetGroupArn: !Ref 'TargetGroupUI'
          ContainerPort: 8000
          ContainerName: !Sub '${AppName}-ui'
      Cluster: !Ref 'ECSClusterName'
      PlacementStrategies:
        - Field: attribute:ecs.availability-zone
          Type: spread
        - Field: instanceId
          Type: spread
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: !Ref 'LogRetention'
      LogGroupName: !Ref 'AWS::StackName'
  SubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    DependsOn:
      - LogGroup
    Properties:
      RoleArn: !ImportValue
        Fn::Sub: ${KinesisStackName}-Role-Arn
      LogGroupName: !Ref 'LogGroup'
      FilterPattern: ''
      DestinationArn: !ImportValue
        Fn::Sub: ${KinesisStackName}-Stream-Arn
  EcsAutoScaleRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: application-autoscaling.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole
  ScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !Ref 'AppMaxCount'
      MinCapacity: !Ref 'AppMinCount'
      ResourceId: !Join
        - /
        - - service
          - !Ref 'ECSClusterName'
          - !GetAtt 'Service.Name'
      RoleARN: !GetAtt 'EcsAutoScaleRole.Arn'
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
  ScaleUpPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Join
        - '-'
        - - !GetAtt 'Service.Name'
          - ScaleUpPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref 'ScalableTarget'
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            MetricIntervalUpperBound: 10
            ScalingAdjustment: 10
          - MetricIntervalLowerBound: 10
            ScalingAdjustment: 30
  ScaleDownPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Join
        - '-'
        - - !GetAtt 'Service.Name'
          - ScaleDownPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref 'ScalableTarget'
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalLowerBound: -10
            MetricIntervalUpperBound: 0
            ScalingAdjustment: -10
          - MetricIntervalUpperBound: -10
            ScalingAdjustment: -30
  CpuUtilAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Cpu utilization alarm for ECS service for high cpu usage
      AlarmActions:
        - !Ref 'ScaleUpPolicy'
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Statistic: Average
      Period: '60'
      EvaluationPeriods: '2'
      Threshold: !Ref 'AutoScaleHighThreshold'
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ClusterName
          Value: !Ref 'ECSClusterName'
        - Name: ServiceName
          Value: !GetAtt 'Service.Name'
  CpuUtilAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Cpu utilization alarm for ECS service for low cpu usage
      AlarmActions:
        - !Ref 'ScaleDownPolicy'
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Statistic: Average
      Period: '60'
      EvaluationPeriods: '2'
      Threshold: !Ref 'AutoScaleLowThreshold'
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: ClusterName
          Value: !Ref 'ECSClusterName'
        - Name: ServiceName
          Value: !GetAtt 'Service.Name'
  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        HostedZoneId: !Ref 'LoadBalancerCanonicalHostedZoneID'
        DNSName: !Ref 'LoadBalancerDNSName'
      HostedZoneName: !ImportValue
        Fn::Sub: ${HostedZoneStackName}-ZoneName
      SetIdentifier: !Ref 'AWS::StackName'
      Weight: 50
      Name: !Sub
        - ${AppName}.${HostedZoneName}
        - AppName: !Ref 'AppName'
          HostedZoneName: !ImportValue
            Fn::Sub: ${HostedZoneStackName}-ZoneName
      Type: A
  DNSRecordUI:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        HostedZoneId: !Ref 'LoadBalancerCanonicalHostedZoneID'
        DNSName: !Ref 'LoadBalancerDNSName'
      HostedZoneName: !ImportValue
        Fn::Sub: ${HostedZoneStackName}-ZoneName
      SetIdentifier: !Ref 'AWS::StackName'
      Weight: 50
      Name: !Sub
        - ${AppName}-ui.${HostedZoneName}
        - AppName: !Ref 'AppName'
          HostedZoneName: !ImportValue
            Fn::Sub: ${HostedZoneStackName}-ZoneName
      Type: A
Outputs:
  Service:
    Description: The name of the ECS service created
    Value: !GetAtt 'Service.Name'
    Export:
      Name: !Sub '${AWS::StackName}-ServiceName'
  TaskFamily:
    Description: The family of the task created for the service
    Value: !Ref 'AWS::StackName'
  TaskArn:
    Description: The ARN of the task created for the service
    Value: !Ref 'TaskDefinition'
  ServiceDNS:
    Description: The dns name of the service
    Value: !Ref 'DNSRecord'
    Export:
      Name: !Sub '${AWS::StackName}-DNSName'
  UIDNS:
    Description: The dns name of the UI for the service
    Value: !Ref 'DNSRecordUI'
    Export:
      Name: !Sub '${AWS::StackName}-DNSNameUI'
  LogGroup:
    Description: The name of the log group created for the app
    Value: !Ref 'LogGroup'
    Export:
      Name: !Sub '${AWS::StackName}-LogGroupName'
