#!/bin/bash

set -e

if [ -n "$APP_PORT" ]
then
    echo "Configuring Schema Registry with APP_PORT: $APP_PORT"
	DOCKER_MIRROR_HOST=$(/sbin/ip route|awk '/default/ { print $3 }')
	DOCKER_MIRROR_PORT=${MIRROR_PORT:-9001}
	DOCKER_MIRROR="http://$DOCKER_MIRROR_HOST:$DOCKER_MIRROR_PORT"

	export HOST_IP=$(curl $DOCKER_MIRROR/hostip)
	export HOST_PORT=$(curl $DOCKER_MIRROR/container/$HOSTNAME/port/$APP_PORT)
	export SCHEMA_REGISTRY_HOST_NAME=$HOST_IP
	export SCHEMA_REGISTRY_LISTENERS="http://0.0.0.0:$HOST_PORT,http://0.0.0.0:$APP_PORT"
else
	export SCHEMA_REGISTRY_HOST_NAME=$APP_HOST
fi

echo "SCHEMA_REGISTRY_HOST_NAME: $SCHEMA_REGISTRY_HOST_NAME"
echo "SCHEMA_REGISTRY_LISTENERS: $SCHEMA_REGISTRY_LISTENERS"

if [ -n "${SCHEMA_REGISTRY_JMX_PORT}" ] || [ -n "${SCHEMA_REGISTRY_JMX_HOSTNAME}" ] || [ -n "${SCHEMA_REGISTRY_JMX_OPTS}" ];
then
    # JMX agent complains about malformed URLs and is not able to resolve ECS container
    # short hostnames. This will take care of the problem.
    echo "127.0.0.1     $HOSTNAME" | tee -a /etc/hosts
fi
echo "SCHEMA_REGISTRY_JMX_HOSTNAME: ${SCHEMA_REGISTRY_JMX_HOSTNAME}"
echo "SCHEMA_REGISTRY_JMX_PORT: ${SCHEMA_REGISTRY_JMX_PORT}"

if [ -n "${SCHEMA_REGISTRY_SSL_DIR}" ];
then
  # If SSL directory env variable is set, generate keystore and truststore
  if [ ! -f ${SCHEMA_REGISTRY_SSL_DIR}/kafka.client.truststore.jks ];
  then
    # If truststore doesn't exist, generate truststore
    echo "Generating Truststore..."
    keytool -import -alias ca -file ${SCHEMA_REGISTRY_SSL_DIR}/ca.crt \
        -keystore ${SCHEMA_REGISTRY_SSL_DIR}/kafka.client.truststore.jks \
        -storepass ${SCHEMA_REGISTRY_KAFKASTORE_SSL_TRUSTSTORE_PASSWORD} \
        -noprompt
    keytool -import -alias client -file ${SCHEMA_REGISTRY_SSL_DIR}/client.crt \
        -keystore ${SCHEMA_REGISTRY_SSL_DIR}/kafka.client.truststore.jks \
        -storepass ${SCHEMA_REGISTRY_KAFKASTORE_SSL_TRUSTSTORE_PASSWORD} \
        -noprompt
  fi

  if [ ! -f ${SCHEMA_REGISTRY_SSL_DIR}/kafka.client.keystore.jks ];
  then
    # IF keystore doesn't exist, generate keystore
    echo "Generating Keystore..."
    keytool -importkeystore \
        -deststorepass ${SCHEMA_REGISTRY_KAFKASTORE_SSL_KEYSTORE_PASSWORD} \
        -destkeypass ${SCHEMA_REGISTRY_KAFKASTORE_SSL_KEY_PASSWORD} \
        -destkeystore ${SCHEMA_REGISTRY_SSL_DIR}/kafka.client.keystore.jks \
        -srckeystore ${SCHEMA_REGISTRY_SSL_DIR}/client.p12 \
        -srcstoretype PKCS12 \
        -srcstorepass ${SCHEMA_REGISTRY_KAFKASTORE_SSL_KEY_PASSWORD} \
        -alias client
  fi
fi

exec "$@"
