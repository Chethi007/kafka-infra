---
AWSTemplateFormatVersion: '2010-09-09'

Description: Creates an ECS cluster

Parameters:
  # Networking
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the ECS instances
    Type: AWS::EC2::KeyPair::KeyName
  VPCId:
    Description: Choose which VPC this ECS cluster should be deployed to
    Type: AWS::EC2::VPC::Id
  Subnets:
    Description: Choose which subnets this ECS cluster should be deployed to
    Type: List<AWS::EC2::Subnet::Id>
  BastionSG:
    Description: Security group used to whitelist for SSH access
    Type: AWS::EC2::SecurityGroup::Id
  ELBSecurityGroupId:
    Description: Security group used to whitelist elb access
    Type: AWS::EC2::SecurityGroup::Id
    Default: ''

  # Instances
  InstanceType:
    Description: Which instance type should we use to build the ECS cluster?
    Type: String
    AllowedValues: [
      m3.large, m3.xlarge, m3.2xlarge,
      m4.large, m4.xlarge, m4.2xlarge,
      m5.large, m5.xlarge, m5.2xlarge,
      c3.large, c3.xlarge, c3.2xlarge,
      c4.large, c4.xlarge, c4.2xlarge,
      c5.large, c5.xlarge, c5.2xlarge,
      r3.large, r3.xlarge, r3.2xlarge,
      r4.large, r4.xlarge, r4.2xlarge,
    ]
    Default: m5.large
    ConstraintDescription: Must be a valid EC2 instance type
  EBSOptimizedInstance:
    Description: Enable EBS optimized flag. This will only work for instances that support it.
    Type: String
    AllowedValues: ['true', 'false']
    Default: true
    ConstraintDescription: Must be either 'true' or 'false'
  AdditionalSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Additional security group to add ECS instances to
    Default: ''

  # Storage
  EBSMountPath:
    Description: Path at which to create the mount for the EBS data volume
    Type: String
    Default: /mnt/data
    MinLength: 1
    ConstraintDescription: Must be a valid folder path
  EBSVolumeSize:
    Description: Data volume size in GB for ECS instances. These will be exposed via EBSMountPath to containers.
    Type: Number
    MinValue: 25
    MaxValue: 2000
    Default: 100
    ConstraintDescription: Must be a value between 25 and 250

  # ASG
  ASGEventsTopic:
    Description: SNS topic to notify of ASG events
    Type: String
  ASGMinSize:
    Description: Minimum size of ECS Auto Scaling Group
    Type: Number
  ASGMaxSize:
    Description: Maximum size of ECS Auto Scaling Group
    Type: Number
  ASGDesiredCapacity:
    Description: Desired Capacity of the ECS Auto Scaling Group
    Type: Number
  RollingUpdateMinInService:
    Description: Minimum instance in service during rolling update
    Type: Number

  # Features
  ClusterType:
    Type: String
    Description: This will configure the ECS cluster for either running servics or kafka
    AllowedValues: [service,kafka]
    Default: service
    ConstraintDescription: |
      Must be either 'service' (schema registry, kafka connect, rest proxy, prometheus, etc)
      or 'kafka' (zookeeper and brokers)
  HostedZoneId:
    Description: The ID of the Hosted Zone in which to register services for service discovery
    Type: String

  # Parameter to force a rolling deployment
  RollingDeploymentVersion:
    Type: Number
    Description: >
      Change this value to force a rolling deployment when there are no changes to
      the launch configuration. Its best to just increment it from the previous value.
    MinValue: 0
    Default: 0
    ConstraintDescription: Must be a non-negative number

  # Tags
  Project:
    Description: Project tag
    Type: String
    MinLength: 1
  Team:
    Description: Team tag
    Type: String
    MinLength: 1
  Environment:
    Description: Environment (dev|sandbox|prod)
    Type: String
    AllowedValues: ['dev','sandbox','prod']
    Default: dev

Mappings:
  # These are the latest ECS optimized AMIs as of March 2018:
  #
  #   amzn-ami-2017.09.j-amazon-ecs-optimized
  #   ECS agent:    1.17.2
  #   Docker:       17.12.0-ce
  #   ecs-init:     1.17.2-1
  #
  # You can find the latest available on this page of our documentation:
  # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html
  # (note the AMI identifier is region specific)
  AWSRegionToAMI:
    us-east-1:
      AMI: ami-cad827b7
    ca-central-1:
      AMI: ami-db48cfbf

Conditions:
  IsClusterTypeService: !Equals [!Ref 'ClusterType', 'service']

Resources:
  ECSLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Ref 'AWS::StackName'
      RetentionInDays: 3
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref 'AWS::StackName'

  # This IAM Role is attached to all of the ECS hosts. It is based on the default role published here:
  # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/instance_IAM_role.html
  #
  # You can add other IAM policy statements here to allow access from your ECS hosts
  # to other AWS services. Please note that this role will be used by ALL containers
  # running on the ECS host.
  ECSInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action: 'sts:AssumeRole'
          Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
      ManagedPolicyArns: [
        'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role',
        'arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess'
      ]
      Policies:
      - PolicyName: ECS-Service
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action: [
              'cloudwatch:PutMetricData',
              'cloudwatch:ListMetrics',
              'cloudwatch:GetMetricStatistics',
              'ds:CreateComputer',
              'ds:DescribeDirectories',
              'ec2:DescribeInstanceStatus',
              'ec2messages:AcknowledgeMessage',
              'ec2messages:DeleteMessage',
              'ec2messages:FailMessage',
              'ec2messages:GetEndpoint',
              'ec2messages:GetMessages',
              'ec2messages:SendReply',
              'ecs:DescribeClusters',
              'ecs:DescribeContainerInstances',
              'ecs:DescribeServices',
              'ecs:DescribeTaskDefinition',
              'ecs:DescribeTasks',
              'logs:CreateLogGroup',
              'logs:DescribeLogGroups',
              'logs:DescribeLogStreams',
              'route53:GetHostedZone',
              'route53:ListHostedZones',
              'route53:ChangeResourceRecordSets',
              'route53:ListResourceRecordSets',
              'route53:ListHostedZonesByName',
              's3:PutObject',
              's3:AbortMultipartUpload',
              'ssm:DescribeAssociation',
              'ssm:GetDeployablePatchSnapshotForInstance',
              'ssm:GetDocument',
              'ssm:GetManifest',
              'ssm:GetParameters',
              'ssm:ListAssociations',
              'ssm:ListInstanceAssociations',
              'ssm:PutInventory',
              'ssm:PutComplianceItems',
              'ssm:PutConfigurePackageResult',
              'ssm:UpdateAssociationStatus',
              'ssm:UpdateInstanceAssociationStatus',
              'ssm:UpdateInstanceInformation'
            ]
            Effect: Allow
            Resource: '*'

  ECSInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'ECSInstanceRole'

  EcsServiceRole:
    Condition: IsClusterTypeService
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service: ecs.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns: ['arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole']

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref 'VPCId'
      GroupDescription: Allow connections from vpc
      SecurityGroupIngress:
      - SourceSecurityGroupId: !Ref 'BastionSG'
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22
      Tags:
      - Key: Name
        Value: !Sub 'ECS Instance SG - ${AWS::StackName}'
      - Key: Project
        Value: !Ref 'Project'
      - Key: Team
        Value: !Ref 'Team'
      - Key: Environment
        Value: !Ref 'Environment'
      - Key: Component
        Value: ecs
      SecurityGroupEgress:
        IpProtocol: -1
        CidrIp: "0.0.0.0/0"

  ECSELBSecurityGroupIngress:
    Condition: IsClusterTypeService
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt ECSSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: '32768'
      ToPort: '65535'
      SourceSecurityGroupId: !Ref 'ELBSecurityGroupId'

  ECSLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: false
      EbsOptimized: !Ref 'EBSOptimizedInstance'
      BlockDeviceMappings:
        - DeviceName: '/dev/xvdh'
          Ebs:
            VolumeSize: !Ref 'EBSVolumeSize'
            DeleteOnTermination: 'true'
            Encrypted: 'true'
            VolumeType: 'gp2'
      IamInstanceProfile: !Ref 'ECSInstanceProfile'
      ImageId:  !FindInMap [AWSRegionToAMI, !Ref 'AWS::Region', AMI]
      InstanceType: !Ref 'InstanceType'
      KeyName: !Ref 'KeyName'
      SecurityGroups:
        - !Ref 'ECSSecurityGroup'
        - !Ref 'AdditionalSecurityGroup'
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash

          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1

          # Increment RollingDeploymentVersion parameter to force rolling deploy
          version=${RollingDeploymentVersion}
          echo $version

          yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
          yum install -y aws-cfn-bootstrap

          echo "Initializing Instance"
          config_set="general"

          if [ "${ClusterType}" == "service" ]; then
            echo "Enabling docker-mirror..."
            config_set="services"
          fi

          /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration --configsets $config_set
          exit_code=$?

          echo "Signalling ASG..."
          /opt/aws/bin/cfn-signal -e $exit_code --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSAutoScalingGroup
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          general:
          - install_logging
          - install_data_volume
          - install_ecs
          - install_monitoring
          - install_service_discovery
          services:
          - ConfigSet: general
          - install_docker_mirror

        # Configure and install aws logs agent
        install_logging:
          packages:
            yum:
              awslogs: []
              jq: []
          files:
            '/etc/awslogs/awscli.conf':
              content: !Sub |
                [plugins]
                cwlogs = cwlogs
                [default]
                region = ${AWS::Region}
            '/etc/awslogs/awslogs.conf':
              content: !Sub |
                [general]
                state_file = /var/lib/awslogs/agent-state

                [/var/log/dmesg]
                file = /var/log/dmesg
                log_group_name = {cluster}
                log_stream_name = {instance_id}/dmesg

                [/var/log/messages]
                file = /var/log/messages
                log_group_name = {cluster}
                log_stream_name = {instance_id}/messages
                datetime_format = %b %d %H:%M:%S

                [/var/log/docker]
                file = /var/log/docker
                log_group_name = {cluster}
                log_stream_name = {instance_id}/docker
                datetime_format = %Y-%m-%dT%H:%M:%S.%f

                [/var/log/ecs/ecs-init.log]
                file = /var/log/ecs/ecs-init.log.*
                log_group_name = {cluster}
                log_stream_name = {instance_id}/ecs-init.log
                datetime_format = %Y-%m-%dT%H:%M:%SZ

                [/var/log/ecs/ecs-agent.log]
                file = /var/log/ecs/ecs-agent.log.*
                log_group_name = {cluster}
                log_stream_name = {instance_id}/ecs-agent.log
                datetime_format = %Y-%m-%dT%H:%M:%SZ

                [/var/log/ecs/audit.log]
                file = /var/log/ecs/audit.log.*
                log_group_name = {cluster}
                log_stream_name = {instance_id}/audit.log
                datetime_format = %Y-%m-%dT%H:%M:%SZ

                [/var/log/cloud-init.log]
                file = /var/log/cloud-init.log
                log_group_name = {cluster}
                log_stream_name = {instance_id}/cloud-init.log
                datetime_format = %Y-%m-%dT%H:%M:%SZ

                [/var/log/cloud-init-output.log]
                file = /var/log/cloud-init-output.log
                log_group_name = {cluster}
                log_stream_name = {instance_id}/cloud-init-output.log
                datetime_format = %Y-%m-%dT%H:%M:%SZ

                [/var/log/cfn-init.log]
                file = /var/log/cfn-init.log
                log_group_name = {cluster}
                log_stream_name = {instance_id}/cfn-init.log
                datetime_format = %Y-%m-%dT%H:%M:%SZ

                [/var/log/cfn-init-cmd.log]
                file = /var/log/cfn-init-cmd.log
                log_group_name = {cluster}
                log_stream_name = {instance_id}/cfn-init-cmd.log
                datetime_format = %Y-%m-%dT%H:%M:%SZ

                [/var/log/user-data.log]
                file = /var/log/user-data.log
                log_group_name = {cluster}
                log_stream_name = {instance_id}/user-data.log
                datetime_format = %Y-%m-%dT%H:%M:%SZ
            '/etc/init/awslogs.conf':
              content: |
                #upstart-job
                description "Configure and start CloudWatch Logs agent on Amazon ECS container instance"
                author "Amazon Web Services"
                start on started ecs

                script
                  exec 2>>/var/log/user-data.log

                  set -x

                  until curl -s http://localhost:51678/v1/metadata
                  do
                      sleep 1
                  done

                  cluster=$(curl -s http://localhost:51678/v1/metadata | jq -r '. | .Cluster')
                  sed -i -e "s/{cluster}/$cluster/g" /etc/awslogs/awslogs.conf

                  container_instance_id=$(curl -s http://localhost:51678/v1/metadata | jq -r '. | .ContainerInstanceArn' | awk -F/ '{print $2}')
                  sed -i -e "s/{container_instance_id}/$container_instance_id/g" /etc/awslogs/awslogs.conf

                  region=$(curl 169.254.169.254/latest/meta-data/placement/availability-zone | sed s'/.$//')
                  sed -i -e "s/region = us-east-1/region = $region/g" /etc/awslogs/awscli.conf

                  service awslogs start
                  chkconfig awslogs on
                end script

        install_data_volume:
          files:
            '/usr/local/share/setup-data-volume':
              mode: '000744'
              owner: root
              group: root
              content: !Sub |
                #!/bin/bash -e

                exec > >(tee /var/log/user-data.log|logger -t setup-data-volume -s 2>/dev/console) 2>&1

                echo "Creating XFS file system on /dev/xvdh..."
                mkfs.xfs -f /dev/xvdh

                echo "Setting up mount point for data volume on ${EBSMountPath}..."
                mkdir -p ${EBSMountPath}
                echo "/dev/xvdh  ${EBSMountPath}  xfs  defaults,inode64,nofail,context=system_u:object_r:var_t:s0  0 2" >> /etc/fstab

                echo "Mounting file system..."
                mount -v ${EBSMountPath}
          commands:
            01_setup_ebs_volume:
              command: '/usr/local/share/setup-data-volume'

        # Let ecs agent know which cluster to join
        install_ecs:
          commands:
            01_add_instance_to_cluster:
              command: !Sub 'echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config'

        install_service_discovery:
          files:
            "/etc/init/service_discovery.conf":
              mode: 000644
              owner: root
              group: root
              content: !Sub |
                #upstart-job
                description "Run service discovery agent after ecs is ready"
                author "LoyaltyOne"
                start on started ecs

                script
                  exec 2>>/var/log/user-data.log
                  set -x

                  until curl -s http://localhost:51678/v1/metadata
                  do
                      sleep 1
                  done

                  cluster=$(curl -s http://localhost:51678/v1/metadata | jq -r '. | .Cluster')
                  region=$(curl 169.254.169.254/latest/meta-data/placement/availability-zone | sed s'/.$//')

                  # Pull docker image. Try up to 3 times before giving up.
                  docker_image=loyaltyone/service-discovery-agent-route53:latest
                  count=3
                  while [[ $count -gt 0 ]]; do
                    echo "Fetching docker image '$docker_image'..."
                    docker pull $docker_image
                    if [[ "$?" -gt 0 ]]; then
                      count=$(($count - 1))
                      echo "Problem fetching docker image '$docker_image'."
                      echo "Taking a nap for 5 seconds..."
                      sleep 5
                    else
                      echo "Fetched docker image for '$docker_image'."
                      count=0
                    fi
                  done

                  # Start service discovery agent
                  echo "Running service discovery agent..."
                  docker run -d \
                    --name service-discovery-agent \
                    --restart always \
                    -v /var/run/docker.sock:/var/run/docker.sock \
                    --add-host host:$(ifconfig docker0 | grep -oP 'inet addr:\K\S+') \
                    --log-driver=awslogs \
                    --log-opt awslogs-group=$cluster \
                    --log-opt awslogs-region=$region \
                    --log-opt tag='{{.Name}}/{{.ID}}' \
                    $docker_image --hostedZoneId=${HostedZoneId}
                end script
        install_docker_mirror:
          files:
            '/etc/init/docker_mirror.conf':
              mode: '000644'
              owner: root
              group: root
              content: |
                #upstart-job
                description "Retrieve instances's private ip to store in /etc/hostip and start docker mirror container"
                author "LoyaltyOne"
                start on started ecs

                script
                  exec 2>>/var/log/user-data.log
                  set -x

                  until curl -s http://169.254.169.254/latest/meta-data
                  do
                      sleep 1
                  done

                  # Grab the ip of this instance
                  ip=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)
                  echo $ip > /etc/hostip

                  # Pull docker image. Try up to 3 times before giving up.
                  docker_image=loyaltyone/docker-mirror:0.1.2
                  count=3
                  while [[ $count -gt 0 ]]; do
                    echo "Fetching docker image '$docker_image'..."
                    docker pull $docker_image
                    if [[ "$?" -gt 0 ]]; then
                      count=$(($count - 1))
                      echo "Problem fetching docker image '$docker_image'."
                      echo "Taking a nap for 5 seconds..."
                      sleep 5
                    else
                      echo "Fetched docker image for '$docker_image'."
                      count=0
                    fi
                  done

                  # Start docker mirror
                  echo "Starting docker mirror..."
                  docker run -d \
                    --name docker-mirror \
                    -p 9001:9000 \
                    --restart always \
                    -v /var/run/docker.sock:/var/run/docker.sock \
                    -v /etc/hostip:/etc/hostip \
                    $docker_image
                end script
        install_monitoring:
          packages:
            yum:
              unzip: []
          commands:
            01_install_disk_mem_monitoring:
              command: |
                #!/bin/bash

                exec 2>>/var/log/user-data.log
                set -e
                set -x

                yum install perl-Switch perl-DateTime perl-Sys-Syslog perl-LWP-Protocol-https perl-Digest-SHA.x86_64 -y

                version=1.2.2
                archive=CloudWatchMonitoringScripts-$version.zip

                mon_dir=/opt/monitoring

                mkdir -p $mon_dir
                cd $mon_dir
                curl http://aws-cloudwatch.s3.amazonaws.com/downloads/$archive -O

                unzip $archive
                rm $archive
          files:
            "/etc/cron.d/metrics":
              content: !Sub |
                # Version: 1.1.2-rpm
                PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

                * * * * * root /opt/monitoring/aws-scripts-mon/mon-put-instance-data.pl --mem-used-incl-cache-buff --mem-avail --mem-util --mem-used --disk-space-units=bytes --disk-space-util --disk-space-used --disk-space-avail --disk-path=/ --disk-path=${EBSMountPath} --auto-scaling --from-cron

              mode: '000644'
              owner: root
              group: root
  ECSAutoScalingGroup:
    DependsOn: 'ECSLogGroup'
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref 'Subnets'
      LaunchConfigurationName: !Ref 'ECSLaunchConfiguration'
      MinSize: !Ref 'ASGMinSize'
      MaxSize: !Ref 'ASGMaxSize'
      DesiredCapacity: !Ref 'ASGDesiredCapacity'
      NotificationConfigurations:
        - TopicARN: !Ref 'ASGEventsTopic'
          NotificationTypes:
          - autoscaling:EC2_INSTANCE_TERMINATE
      Tags:
        - Key: Name
          Value: !Sub 'ECS Container Instance - ${AWS::StackName}'
          PropagateAtLaunch: true
        - Key: Project
          Value: !Ref 'Project'
          PropagateAtLaunch: true
        - Key: Team
          Value: !Ref 'Team'
          PropagateAtLaunch: true
        - Key: Environment
          Value: !Ref 'Environment'
          PropagateAtLaunch: true
        - Key: Component
          Value: ecs
          PropagateAtLaunch: true
        - Key: Scheduler
          Value: false
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: !Ref 'RollingUpdateMinInService'
        MaxBatchSize: 1
        PauseTime: PT15M
        SuspendProcesses:
          - HealthCheck
          - ReplaceUnhealthy
          - AZRebalance
          - AlarmNotification
          - ScheduledActions
        WaitOnResourceSignals: true

  ECSAutoScalingNotificationAccessRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: autoscaling.amazonaws.com
      ManagedPolicyArns: ['arn:aws:iam::aws:policy/service-role/AutoScalingNotificationAccessRole']

  ECSAutoScalingGroupLifecycleHook:
    Type: AWS::AutoScaling::LifecycleHook
    Properties:
      AutoScalingGroupName: !Ref 'ECSAutoScalingGroup'
      LifecycleTransition: 'autoscaling:EC2_INSTANCE_TERMINATING'
      NotificationTargetARN: !Ref 'ASGEventsTopic'
      RoleARN: !GetAtt 'ECSAutoScalingNotificationAccessRole.Arn'
      DefaultResult: 'ABANDON'
      HeartbeatTimeout: '300'

  # unused but exported by
  # awslabs/ecs-refarch-cloudformation/master/infrastructure/ecs-cluster.yaml
  ECSServiceAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Action: 'sts:AssumeRole'
          Effect: Allow
          Principal:
            Service: application-autoscaling.amazonaws.com
      Policies:
      - PolicyName: ecs-service-autoscaling
        PolicyDocument:
          Statement:
            Action:
            - application-autoscaling:DeleteScalingPolicy
            - application-autoscaling:DeleteScheduledAction
            - application-autoscaling:DeregisterScalableTarget
            - application-autoscaling:DescribeScalableTargets
            - application-autoscaling:DescribeScalingActivities
            - application-autoscaling:DescribeScalingPolicies
            - application-autoscaling:DescribeScheduledActions
            - application-autoscaling:PutScalingPolicy
            - application-autoscaling:PutScheduledAction
            - application-autoscaling:RegisterScalableTarget
            - cloudwatch:DescribeAlarms
            - cloudwatch:PutMetricAlarm
            - ecs:DescribeServices
            - ecs:UpdateService
            Effect: Allow
            Resource: '*'

  # unused but exported by, not sure if we need this since we don't use LBs?
  # LoyaltyOne/apollo-platform/blob/master/common/ecs/Cluster-with-ALB-CPU-Scaling.yml
  # The Amazon ECS service scheduler makes calls to the Amazon EC2 and Elastic Load Balancing APIs on your behalf
  # to register and deregister container instances with your load balancers. Before you can attach a load balancer
  # to an Amazon ECS service, you must create an IAM role for your services to use before you start them.
  # This requirement applies to any Amazon ECS service that you plan to use with a load balancer.
  EcsServiceSchedulerRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action: 'sts:AssumeRole'
          Effect: Allow
          Principal:
            Service: ecs.amazonaws.com
      ManagedPolicyArns: ['arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole']

Outputs:
  ClusterName:
    Description: A reference to the ECS cluster
    Value: !Ref 'ECSCluster'
  AutoScalingGroupName:
    Description: A reference to ECS AutoScaling Group Name
    Value: !Ref 'ECSAutoScalingGroup'
  ServiceAutoScalingRole:
    Description: A reference to ECS service auto scaling role
    Value: !GetAtt 'ECSServiceAutoScalingRole.Arn'
  ServiceSchedulerRole:
    Description: A reference to ECS service load balancing role
    Value: !GetAtt 'EcsServiceSchedulerRole.Arn'
  InstanceSecurityGroup:
    Description: The ID of the ecs container instance security group created
    Value: !GetAtt [ECSSecurityGroup, GroupId]
  VpcId:
    Description: "Cluster's VPC Id"
    Value: !Ref 'VPCId'
  ServiceRole:
    Condition: IsClusterTypeService
    Description: The ARN of the ECS service role
    Value: !GetAtt [EcsServiceRole, Arn]
  EBSMountPath:
    Description: Path at which to create the mount for the EBS data volume
    Value: !Ref 'EBSMountPath'
