{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Creates a service / task def for Prometheus server",
  "Parameters": {
    "ClusterStackName": {
      "Description": "Name of an active CloudFormation stack that contains an ECS cluster",
      "Type": "String",
      "MinLength": 1,
      "MaxLength": 255,
      "AllowedPattern": "^[a-zA-Z][-a-zA-Z0-9]*$"
    },
    "Priority": {
      "Type": "Number",
      "Description": "The priority to register with the Load Balancer"
    },
    "AppName": {
      "Type": "String",
      "Description": "Name of app. Should be the same as docker repository name.",
      "Default": "prometheus"
    },
    "AppVersion": {
      "Type": "String",
      "Description": "Version label of app"
    },
    "AppContainerPort": {
      "Type": "Number",
      "Description": "Port the app runs on in the image",
      "Default": "9090"
    },
    "ImageRepository": {
      "Type": "String",
      "Description": "The URI of the image repository where the app is published. Do not include app name in URI.",
      "Default": "loyaltyone"
    },
    "Memory": {
      "Type": "Number",
      "Description": "Soft memory on container",
      "Default": "1024"
    },
    "Cpu": {
      "Type": "Number",
      "Description": "cpu unites on container",
      "Default": "100"
    },
    "AutoScaleHighThreshold": {
      "Type": "Number",
      "Description": "Percentage of service memory utilization that is considered high",
      "Default": "55"
    },
    "AutoScaleLowThreshold": {
      "Type": "Number",
      "Description": "Percentage of service memory utilization that is considered low",
      "Default": "15"
    },
    "LogRetention": {
      "Type": "Number",
      "Description": "Number of days to retain logs in CWL",
      "Default": "14"
    },
    "KinesisStackName": {
      "Type": "String",
      "Description": "Name of the CF stack used to create the Kinesis stream"
    },
    "HostedZoneStackName": {
      "Type": "String",
      "Description": "The Hosted Zone stack name to create the service's record set in"
    },
    "EFSMountPath": {
      "Type": "String",
      "Description": "Path to EFS Directory",
      "AllowedPattern": "^(\/[A-Za-z0-9_.-]+)+$",
      "ConstraintDescription": "Must be a valid file system path"
    },
    "Project": {
      "Type": "String",
      "MinLength": 1,
      "Description": "Project tag",
      "ConstraintDescription": "Must be a non-empty string"
    },
    "Team": {
      "Type": "String",
      "MinLength": 1,
      "Description": "Team tag",
      "ConstraintDescription": "Must be a non-empty string"
    },
    "Environment": {
      "Type": "String",
      "AllowedValues": ["dev", "sandbox", "prod"],
      "Default": "dev",
      "Description": "Environment",
      "ConstraintDescription": "Must be one of dev|sandbox|prod"
    }
  },
  "Resources": {
    "TargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "HealthCheckIntervalSeconds": 10,
        "HealthCheckProtocol": "HTTP",
        "HealthCheckTimeoutSeconds": 5,
        "HealthCheckPath": "/status",
        "HealthyThresholdCount": 2,
        "HealthCheckPort": {
          "Ref": "AppContainerPort"
        },
        "Matcher": {
          "HttpCode": "200-299"
        },
        "Port": {
          "Ref": "AppContainerPort"
        },
        "Protocol": "HTTP",
        "TargetGroupAttributes": [{
          "Key": "deregistration_delay.timeout_seconds",
          "Value": "300"
        }],
        "UnhealthyThresholdCount": 3,
        "VpcId": {
          "Fn::ImportValue": {
            "Fn::Sub": "${ClusterStackName}-VpcId"
          }
        },
        "Tags": [{
            "Key": "Name",
            "Value": {
              "Fn::Sub": "ECS Target Group - ${AWS::StackName}"
            }
          },
          {
            "Key": "Project",
            "Value": {
              "Ref": "Project"
            }
          },
          {
            "Key": "Team",
            "Value": {
              "Ref": "Team"
            }
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "Environment"
            }
          },
          {
            "Key": "Component",
            "Value": "prometheus"
          }
        ]
      }
    },
    "ListenerRule": {
      "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
      "Properties": {
        "ListenerArn": {
          "Fn::ImportValue": {
            "Fn::Sub": "${ClusterStackName}-Listener"
          }
        },
        "Priority": {
          "Ref": "Priority"
        },
        "Conditions": [{
          "Field": "host-header",
          "Values": [{
            "Ref": "DNSRecord"
          }]
        }],
        "Actions": [{
          "TargetGroupArn": {
            "Ref": "TargetGroup"
          },
          "Type": "forward"
        }]
      }
    },
    "EcsTaskRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Sid": "",
            "Effect": "Allow",
            "Principal": {
              "Service": "ecs-tasks.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
          }]
        },
        "Path": "/",
        "Policies": []
      }
    },
    "TaskDefinition": {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "ContainerDefinitions": [{
          "Name": {
            "Ref": "AppName"
          },
          "Image": {
            "Fn::Sub": "${ImageRepository}/${AppName}:${AppVersion}"
          },
          "Cpu": {
            "Ref": "Cpu"
          },
          "User": "root",
          "PortMappings": [{
            "ContainerPort": {
              "Ref": "AppContainerPort"
            },
            "HostPort": {
              "Ref": "AppContainerPort"
            }
          }],
          "MountPoints": [{
            "SourceVolume": "data",
            "ContainerPath": "/usr/local/share/data"
          }],
          "MemoryReservation": {
            "Ref": "Memory"
          },
          "Essential": "true",
          "LogConfiguration": {
            "LogDriver": "awslogs",
            "Options": {
              "awslogs-group": {
                "Ref": "LogGroup"
              },
              "awslogs-region": {
                "Ref": "AWS::Region"
              },
              "awslogs-stream-prefix": "ecs"
            }
          },
          "Command": [
            "--config.file=/etc/prometheus/prometheus.yml",
            "--storage.tsdb.path=/usr/local/share/data",
            "--storage.tsdb.min-block-duration=30m",
            "--storage.tsdb.max-block-duration=1d",
            "--web.console.libraries=/usr/share/prometheus/console_libraries",
            "--web.console.templates=/usr/share/prometheus/consoles"
          ]
        }],
        "Volumes": [{
          "Name": "data",
          "Host": {
            "SourcePath": {
              "Fn::Sub": "${EFSMountPath}/${AWS::StackName}/prometheus/data"
            }
          }
        }],
        "Family": {
          "Ref": "AWS::StackName"
        },
        "TaskRoleArn": {
          "Ref": "EcsTaskRole"
        }
      }
    },
    "Service": {
      "Type": "AWS::ECS::Service",
      "DependsOn": [
        "ListenerRule",
        "LogGroup"
      ],
      "Properties": {
        "ServiceName": {
          "Ref": "AppName"
        },
        "TaskDefinition": {
          "Ref": "TaskDefinition"
        },
        "DesiredCount": 1,
        "LoadBalancers": [{
          "TargetGroupArn": {
            "Ref": "TargetGroup"
          },
          "ContainerPort": {
            "Ref": "AppContainerPort"
          },
          "ContainerName": {
            "Ref": "AppName"
          }
        }],
        "Cluster": {
          "Fn::ImportValue": {
            "Fn::Sub": "${ClusterStackName}-ClusterName"
          }
        },
        "PlacementStrategies": [{
            "Field": "attribute:ecs.availability-zone",
            "Type": "spread"
          },
          {
            "Field": "instanceId",
            "Type": "spread"
          }
        ],
        "DeploymentConfiguration": {
          "MaximumPercent": "100",
          "MinimumHealthyPercent": "0"
        }
      }
    },
    "LogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "RetentionInDays": {
          "Ref": "LogRetention"
        },
        "LogGroupName": {
          "Ref": "AWS::StackName"
        }
      }
    },
    "SubscriptionFilter": {
      "Type": "AWS::Logs::SubscriptionFilter",
      "DependsOn": [
        "LogGroup"
      ],
      "Properties": {
        "RoleArn": {
          "Fn::ImportValue": {
            "Fn::Sub": "${KinesisStackName}-Role-Arn"
          }
        },
        "LogGroupName": {
          "Ref": "LogGroup"
        },
        "FilterPattern": "",
        "DestinationArn": {
          "Fn::ImportValue": {
            "Fn::Sub": "${KinesisStackName}-Stream-Arn"
          }
        }
      }
    },
    "EcsAutoScaleRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {
              "Service": "application-autoscaling.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
          }]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole"
        ]
      }
    },
    "DNSRecord": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "AliasTarget": {
          "HostedZoneId": {
            "Fn::ImportValue": {
              "Fn::Sub": "${ClusterStackName}-LoadBalancerCanonicalHostedZoneID"
            }
          },
          "DNSName": {
            "Fn::ImportValue": {
              "Fn::Sub": "${ClusterStackName}-LoadBalancerDNSName"
            }
          }
        },
        "HostedZoneId": {
          "Fn::ImportValue": {
            "Fn::Sub": "${HostedZoneStackName}-ZoneId"
          }
        },
        "SetIdentifier": {
          "Ref": "AWS::StackName"
        },
        "Weight": 50,
        "Name": {
          "Fn::Sub": [
            "${AppName}.${HostedZoneName}",
            {
              "AppName": {
                "Ref": "AppName"
              },
              "HostedZoneName": {
                "Fn::ImportValue": {
                  "Fn::Sub": "${HostedZoneStackName}-ZoneName"
                }
              }
            }
          ]
        },
        "Type": "A"
      }
    }
  },
  "Outputs": {
    "Service": {
      "Description": "The name of the ECS service created",
      "Value": {
        "Fn::GetAtt": [
          "Service",
          "Name"
        ]
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-ServiceName"
        }
      }
    },
    "TaskFamily": {
      "Description": "The family of the task created for the service",
      "Value": {
        "Ref": "AWS::StackName"
      }
    },
    "TaskArn": {
      "Description": "The ARN of the task created for the service",
      "Value": {
        "Ref": "TaskDefinition"
      }
    },
    "ServiceDNS": {
      "Description": "The dns name of the service",
      "Value": {
        "Ref": "DNSRecord"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-DNSName"
        }
      }
    },
    "LogGroup": {
      "Description": "The name of the log group created for the app",
      "Value": {
        "Ref": "LogGroup"
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-LogGroupName"
        }
      }
    }
  }
}
