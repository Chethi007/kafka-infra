#!/bin/bash

set -e

if [ -n "$APP_PORT" ]
then
	echo "Configuring Kafka Connect with APP_PORT: $APP_PORT"
	DOCKER_MIRROR_HOST=$(/sbin/ip route|awk '/default/ { print $3 }')
	DOCKER_MIRROR_PORT=${MIRROR_PORT:-9001}
	DOCKER_MIRROR="http://$DOCKER_MIRROR_HOST:$DOCKER_MIRROR_PORT"

	export HOST_IP=$(curl $DOCKER_MIRROR/hostip)
	export HOST_PORT=$(curl $DOCKER_MIRROR/container/$HOSTNAME/port/$APP_PORT)
	export CONNECT_REST_ADVERTISED_HOST_NAME=$HOST_IP
	export CONNECT_REST_ADVERTISED_PORT=$HOST_PORT
else
	export CONNECT_REST_ADVERTISED_HOST_NAME=$APP_HOST
	export CONNECT_REST_ADVERTISED_PORT=${CONNECT_REST_ADVERTISED_PORT:-8083}
fi

echo "CONNECT_REST_ADVERTISED_HOST_NAME: $CONNECT_REST_ADVERTISED_HOST_NAME"
echo "CONNECT_REST_ADVERTISED_PORT: $CONNECT_REST_ADVERTISED_PORT"

if [ -n "${KAFKA_JMX_PORT}" ] || [ -n "${KAFKA_JMX_HOSTNAME}" ] || [ -n "${KAFKA_JMX_OPTS}" ];
then
    # JMX agent complains about malformed URLs and is not able to resolve ECS container
    # short hostnames. This will take care of the problem.
    echo "127.0.0.1     $HOSTNAME" | tee -a /etc/hosts
fi
echo "KAFKA_JMX_HOSTNAME: ${KAFKA_JMX_HOSTNAME}"
echo "KAFKA_JMX_PORT: ${KAFKA_JMX_PORT}"

# If SSL directory env variable is set, generate keystore and truststore
if [ -n "${SSL_DIR}" ];
then
    # If KMS data key is present, decrypt it and use that to decrypt passwords.
    if [ -n ${KMS_DATA_KEY} ]; then
        # NOTE: Do not export plaintext KMS data key.
        echo "Decrypting KMS data key..."
        kms_data_key_plaintext=$(aws kms decrypt --region ${REGION} \
            --ciphertext-blob fileb://<(echo ${KMS_DATA_KEY} | base64 -d) \
            --query Plaintext --output text)

        echo "Decrypting CONNECT_SSL_KEY_PASSWORD..."
        export CONNECT_SSL_KEY_PASSWORD=$(openssl enc -d -aes256 \
            -k <(echo "${kms_data_key_plaintext}") \
            -in <(echo "${CONNECT_SSL_KEY_PASSWORD}" | base64 -d))

        echo "Decrypting CONNECT_SSL_KEYSTORE_PASSWORD..."
        export CONNECT_SSL_KEYSTORE_PASSWORD=$(openssl enc -d -aes256 \
            -k <(echo "${kms_data_key_plaintext}") \
            -in <(echo "${CONNECT_SSL_KEYSTORE_PASSWORD}" | base64 -d))

        echo "Decrypting CONNECT_SSL_TRUSTSTORE_PASSWORD..."
        export CONNECT_SSL_TRUSTSTORE_PASSWORD=$(openssl enc -d -aes256 \
            -k <(echo "${kms_data_key_plaintext}") \
            -in <(echo "${CONNECT_SSL_TRUSTSTORE_PASSWORD}" | base64 -d))
    fi

	# TODO: Handle changes in passwords which would warrant generation of new truststore.

	# If truststore doesn't exist, generate truststore
	if [ ! -f ${SSL_DIR}/kafka.client.truststore.jks ];
	then
	  echo "Generating Truststore..."
	  keytool -import -alias ca -file ${SSL_DIR}/ca.crt \
	      -keystore ${SSL_DIR}/kafka.client.truststore.jks \
	      -storepass ${CONNECT_SSL_TRUSTSTORE_PASSWORD} \
	      -noprompt
	  keytool -import -alias client -file ${SSL_DIR}/client.crt \
	      -keystore ${SSL_DIR}/kafka.client.truststore.jks \
	      -storepass ${CONNECT_SSL_TRUSTSTORE_PASSWORD} \
	      -noprompt
	fi

	# If keystore doesn't exist, generate keystore
	if [ ! -f ${SSL_DIR}/kafka.client.keystore.jks ];
	then
		echo "Generating Keystore..."
		keytool -importkeystore \
			-deststorepass ${CONNECT_SSL_KEYSTORE_PASSWORD} \
			-destkeypass ${CONNECT_SSL_KEY_PASSWORD} \
			-destkeystore ${SSL_DIR}/kafka.client.keystore.jks \
			-srckeystore ${SSL_DIR}/client.p12 \
			-srcstoretype PKCS12 \
			-srcstorepass ${CONNECT_SSL_KEY_PASSWORD} \
			-alias client
	fi
fi

exec "$@"
