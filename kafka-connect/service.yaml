AWSTemplateFormatVersion: '2010-09-09'
Description: Creates a service / task def for Kafka Connect
Parameters:
  Cluster:
    Description: Name of an active CloudFormation stack that contains an ECS cluster
    Type: String
    MinLength: 1
    MaxLength: 255
    AllowedPattern: ^[a-zA-Z][-a-zA-Z0-9]*$
  Priority:
    Type: Number
    Description: The priority to register with the Load Balancer
  AppContainerPort:
    Type: Number
    Description: Port the app runs on in the image
    Default: '8083'
  AppName:
    Type: String
    Description: Name of app. Should be the same as docker repository name.
  ServiceMemory:
    Type: Number
    Description: Soft memory on container
    Default: '1024'
  ServiceCpu:
    Type: Number
    Description: cpu unites on container
    Default: '128'
  JmxtransMemory:
    Type: Number
    Description: Soft memory on container
    Default: '512'
  JmxtransCpu:
    Type: Number
    Description: cpu unites on container
    Default: '128'
  AppDesiredCount:
    Type: Number
    Description: Number of instances of the service to run
    Default: '2'
  AppMaxCount:
    Type: Number
    Description: Max number of instances of the service to scale out to
    Default: '3'
  AppMinCount:
    Type: Number
    Description: Min number of instances of the service to scale in to
    Default: '1'
  AutoScaleHighThreshold:
    Type: Number
    Description: Percentage of service memory utilization that is considered high
    Default: '55'
  AutoScaleLowThreshold:
    Type: Number
    Description: Percentage of service memory utilization that is considered low
    Default: '15'
  JMXPort:
    Description: JMX Port to expose metrics on
    Type: Number
    Default: 8989
  LogRetention:
    Type: Number
    Description: Number of days to retain logs in CWL
    Default: '14'
  KinesisStackName:
    Type: String
    Description: Name of the CF stack used to create the Kinesis stream
  HostedZoneStackName:
    Type: String
    Description: The Hosted Zone stack name to create the service's record set in
  TrustedCertsBucket:
    Type: String
    Description: The S3 bucket where the trusted certs are available
  DataVolumeMountPath:
    Description: Path to directory for mounting data
    Type: String
    MinLength: 1
    ConstraintDescription: Must be a valid folder path
  Listener:
    Description: ARN of the listener
    Type: String
  VpcId:
    Description: Choose which VPC this cluster should be deployed to
    Type: AWS::EC2::VPC::Id
  EcsServiceRole:
    Description: The Service role used by ECS
    Type: String
  LoadBalancerCanonicalHostedZoneID:
    Description: Hosted Zone ID for the load balancer
    Type: String
  LoadBalancerDNSName:
    Description: Load balancer DNS name
    Type: String
  ZookeeperConnectionString:
    Description: 'Comma delimited list of Zookeeper node addresses'
    Type: String
  KafkaConnectionString:
    Description: 'Comma delimited list of Kafka broker addresses'
    Type: String
  KmsDataKey:
    Description: >
      The KMS Data Key Ciphertext (Base64 encoded). If this is not provided the password parameters
      will be treated as plaintext.
    Type: String
    NoEcho: true
    Default: ''
  KeyPass:
    Description: >
      Password for the Kafka Connect key. If KmsDataKey are provided, this should be the Base64 encoded;
      otherwise set it to the plaintext password (not recommended).
    Type: String
    NoEcho: true
    Default: ''
  KeystorePass:
    Description: >
      Password for the Kafka Connect keystore. If KmsDataKey are provided, this should be the Base64 encoded;
      otherwise set it to the plaintext password (not recommended).
    Type: String
    NoEcho: true
    Default: ''
  TruststorePass:
    Description: >
      Password for the Kafka Connect truststore. If KmsDataKey are provided, this should be the Base64 encoded;
      otherwise set it to the plaintext password (not recommended).
    Type: String
    NoEcho: true
    Default: ''

Resources:
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthCheckPath: !Sub '/connector-plugins'
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200-299
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '300'
      UnhealthyThresholdCount: 3
      VpcId: !Ref 'VpcId'
      Tags:
        - Key: Name
          Value: !Sub 'ECS Target Group - ${AWS::StackName}'
  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref 'Listener'
      Priority: !Ref 'Priority'
      Conditions:
        - Field: host-header
          Values:
            - !Ref 'DNSRecord'
      Actions:
        - TargetGroupArn: !Ref 'TargetGroup'
          Type: forward
  EcsTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: S3-Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: s3:GetObject
                Resource: !Sub 'arn:aws:s3:::${TrustedCertsBucket}/*'
        - PolicyName: ECS-Service
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: kms:Decrypt
                Resource: '*'
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: !Ref 'AppName'
          Image: loyaltyone/kafka-connect:0.1.0
          Cpu: !Ref 'ServiceCpu'
          PortMappings:
            - ContainerPort: !Ref 'AppContainerPort'
              HostPort: 0
            - ContainerPort: !Ref 'JMXPort'
              HostPort: !Ref 'JMXPort'
          MemoryReservation: !Ref 'ServiceMemory'
          Essential: 'true'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref 'LogGroup'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: ecs
          Environment:
            - Name: APP_PORT
              Value: !Ref 'AppContainerPort'
            - Name: CONNECT_ZOOKEEPER_CONNECT
              Value: !Ref 'ZookeeperConnectionString'
            - Name: CONNECT_BOOTSTRAP_SERVERS
              Value: !Ref 'KafkaConnectionString'
            - Name: CONNECT_GROUP_ID
              Value: kafka-connect-group
            - Name: CONNECT_PLUGIN_PATH
              Value: /usr/local/share/kafka/plugins
            - Name: CONNECT_CONFIG_STORAGE_TOPIC
              Value: kafka-connect-configs
            - Name: CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR
              Value: 3
            - Name: CONNECT_OFFSET_FLUSH_INTERVAL_MS
              Value: 10000
            - Name: CONNECT_OFFSET_STORAGE_TOPIC
              Value: kafka-connect-offsets
            - Name: CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR
              Value: 3
            - Name: CONNECT_STATUS_STORAGE_TOPIC
              Value: kafka-connect-status
            - Name: CONNECT_STATUS_STORAGE_REPLICATION_FACTOR
              Value: 3
            - Name: CONNECT_KEY_CONVERTER
              Value: org.apache.kafka.connect.json.JsonConverter
            - Name: CONNECT_VALUE_CONVERTER
              Value: org.apache.kafka.connect.json.JsonConverter
            - Name: CONNECT_INTERNAL_KEY_CONVERTER
              Value: org.apache.kafka.connect.json.JsonConverter
            - Name: CONNECT_INTERNAL_VALUE_CONVERTER
              Value: org.apache.kafka.connect.json.JsonConverter
            - Name: KAFKA_JMX_HOSTNAME
              Value: !Ref 'AppName'
            - Name: KAFKA_JMX_PORT
              Value: !Ref 'JMXPort'
            - Name: SSL_DIR
              Value: '/var/private/ssl'
            - Name: CONNECT_SECURITY_PROTOCOL
              Value: 'SSL'
            - Name: KMS_DATA_KEY
              Value: !Ref 'KmsDataKey'
            - Name: CONNECT_SSL_KEY_PASSWORD
              Value: !Ref 'KeyPass'
            - Name: CONNECT_SSL_KEYSTORE_LOCATION
              Value: !Sub '/var/private/ssl/kafka.client.keystore.jks'
            - Name: CONNECT_SSL_KEYSTORE_PASSWORD
              Value: !Ref 'KeystorePass'
            - Name: CONNECT_SSL_TRUSTSTORE_LOCATION
              Value: !Sub '/var/private/ssl/kafka.client.truststore.jks'
            - Name: CONNECT_SSL_TRUSTSTORE_PASSWORD
              Value: !Ref 'TruststorePass'
            - Name: CONNECT_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM
              Value: 'HTTPS'
            - Name: REGION
              Value: !Ref 'AWS::Region'
          MountPoints:
            - SourceVolume: ssl
              ContainerPath: /var/private/ssl
        - Name: jmxtrans
          Image: loyaltyone/jmxtrans:0.1.0
          Cpu: !Ref 'JmxtransCpu'
          MemoryReservation: !Ref 'JmxtransMemory'
          Links: [!Ref 'AppName']
          Environment:
            - Name: SECONDS_BETWEEN_RUNS
              Value: 60
            - Name: JMXTRANS_ENV
              Value: aws
            - Name: JMXTRANS_HOSTS
              Value: !Sub 'kafka-connect#${AppName}:${JMXPort}'
            - Name: JMXTRANS_ALIASES
              Value: !Ref 'AppName'
            - Name: ECS_SIDECAR
              Value: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref 'LogGroup'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: !Sub 'kafka-connect'
      Volumes:
        - Name: ssl
          Host:
            SourcePath: !Sub '${DataVolumeMountPath}/ssl'
      Family: !Ref 'AWS::StackName'
      TaskRoleArn: !Ref 'EcsTaskRole'
  Service:
    Type: AWS::ECS::Service
    DependsOn:
      - ListenerRule
      - LogGroup
    Properties:
      ServiceName: !Ref 'AppName'
      Role: !Ref 'EcsServiceRole'
      TaskDefinition: !Ref 'TaskDefinition'
      DesiredCount: !Ref 'AppDesiredCount'
      LoadBalancers:
        - TargetGroupArn: !Ref 'TargetGroup'
          ContainerPort: !Ref 'AppContainerPort'
          ContainerName: !Ref 'AppName'
      Cluster: !Ref 'Cluster'
      PlacementStrategies:
        - Field: attribute:ecs.availability-zone
          Type: spread
        - Field: instanceId
          Type: spread
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: !Ref 'LogRetention'
      LogGroupName: !Ref 'AWS::StackName'
  SubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    DependsOn:
      - LogGroup
    Properties:
      RoleArn: !ImportValue
        Fn::Sub: ${KinesisStackName}-Role-Arn
      LogGroupName: !Ref 'LogGroup'
      FilterPattern: ''
      DestinationArn: !ImportValue
        Fn::Sub: ${KinesisStackName}-Stream-Arn
  EcsAutoScaleRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: application-autoscaling.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole
  ScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !Ref 'AppMaxCount'
      MinCapacity: !Ref 'AppMinCount'
      ResourceId: !Join
        - /
        - - service
          - !Ref 'Cluster'
          - !GetAtt 'Service.Name'
      RoleARN: !GetAtt 'EcsAutoScaleRole.Arn'
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
  ScaleUpPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Join
        - '-'
        - - !GetAtt 'Service.Name'
          - ScaleUpPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref 'ScalableTarget'
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            MetricIntervalUpperBound: 10
            ScalingAdjustment: 10
          - MetricIntervalLowerBound: 10
            ScalingAdjustment: 30
  ScaleDownPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Join
        - '-'
        - - !GetAtt 'Service.Name'
          - ScaleDownPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref 'ScalableTarget'
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalLowerBound: -10
            MetricIntervalUpperBound: 0
            ScalingAdjustment: -10
          - MetricIntervalUpperBound: -10
            ScalingAdjustment: -30
  CpuUtilAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Cpu utilization alarm for ECS service for high cpu usage
      AlarmActions:
        - !Ref 'ScaleUpPolicy'
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Statistic: Average
      Period: '60'
      EvaluationPeriods: '2'
      Threshold: !Ref 'AutoScaleHighThreshold'
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ClusterName
          Value: !Ref 'Cluster'
        - Name: ServiceName
          Value: !GetAtt 'Service.Name'
  CpuUtilAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Cpu utilization alarm for ECS service for low cpu usage
      AlarmActions:
        - !Ref 'ScaleDownPolicy'
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Statistic: Average
      Period: '60'
      EvaluationPeriods: '2'
      Threshold: !Ref 'AutoScaleLowThreshold'
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: ClusterName
          Value: !Ref 'Cluster'
        - Name: ServiceName
          Value: !GetAtt 'Service.Name'
  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        HostedZoneId: !Ref 'LoadBalancerCanonicalHostedZoneID'
        DNSName: !Ref 'LoadBalancerDNSName'
      HostedZoneId: !ImportValue
        Fn::Sub: ${HostedZoneStackName}-ZoneId
      SetIdentifier: !Ref 'AWS::StackName'
      Weight: 50
      Name: !Sub
        - ${AppName}.${HostedZoneName}
        - AppName: !Ref 'AppName'
          HostedZoneName: !ImportValue
            Fn::Sub: ${HostedZoneStackName}-ZoneName
      Type: A
Outputs:
  Service:
    Description: The name of the ECS service created
    Value: !GetAtt 'Service.Name'
  TaskFamily:
    Description: The family of the task created for the service
    Value: !Ref 'AWS::StackName'
  TaskArn:
    Description: The ARN of the task created for the service
    Value: !Ref 'TaskDefinition'
  URL:
    Description: The URL at which the service is available
    Value: !Sub 'https://${DNSRecord}'
  LogGroup:
    Description: The name of the log group created for the app
    Value: !Ref 'LogGroup'
