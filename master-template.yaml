---
AWSTemplateFormatVersion: '2010-09-09'

Description: >
  This template deploys a highly available ECS cluster using an AutoScaling Group, with ECS hosts distributed across
  3 availability zones. It then deploys a Zookeeper cluster from containers published in Docker Hub.

Parameters:
  # Parameter to force a rolling deployment
  RollingDeploymentVersion:
    Type: Number
    Description: >
      Change this value to force a rolling deployment when there are no changes to
      the launch configuration. Its best to just increment it from the previous value.
    MinValue: 0
    Default: 0
    ConstraintDescription: Must be a non-negative number
  HostedZoneStackName:
    Description: The Stack Name of the hosted zone in which to register services
    Type: String

  # Networking
  KeyName:
    Description: Key Pair name for SSH access
    Type: AWS::EC2::KeyPair::KeyName
  VPCId:
    Description: Choose which VPC this cluster should be deployed to
    Type: AWS::EC2::VPC::Id
  Subnets:
    Description: Choose three private subnets this cluster should be deployed to
    Type: List<AWS::EC2::Subnet::Id>
  AvailabilityZones:
    Description: >
      Comma-separated list of 3 availability zones this cluster should be deployed to - must be in the same
      corresponding order as the Subnets parameter.
    Type: CommaDelimitedList
  BastionSG:
    Description: Security group used to whitelist for SSH access
    Type: AWS::EC2::SecurityGroup::Id
  DomainName:
    Description: >
      The domain under which the Kafka and Zookeeper nodes will register their advertised address.
      Note: This is the HostedZoneName without the period suffix.
    Type: String

  BrokerInstanceType:
    Description: Which instance type should we use to build the Kafka ECS cluster
    Type: String
    AllowedValues: [
      m4.large, m4.xlarge, m4.2xlarge,
      m5.large, m5.xlarge, m5.2xlarge,
      c4.large, c4.xlarge, c4.2xlarge,
      c5.large, c5.xlarge, c5.2xlarge,
      r4.large, r4.xlarge, r4.2xlarge
    ]
    Default: m5.large
    ConstraintDescription: Must be a valid EC2 instance type
  ZookeeperInstanceType:
    Description: Which instance type should we use to build the Zookeeper ECS cluster
    Type: String
    AllowedValues: [
      m4.large, m4.xlarge, m4.2xlarge,
      m5.large, m5.xlarge, m5.2xlarge,
      c4.large, c4.xlarge, c4.2xlarge,
      c5.large, c5.xlarge, c5.2xlarge,
      r4.large, r4.xlarge, r4.2xlarge
    ]
    Default: m5.large
    ConstraintDescription: Must be a valid EC2 instance type
  ServicesInstanceType:
    Description: Which instance type should we use to build the Kafka ECS cluster
    Type: String
    AllowedValues: [
      m4.large, m4.xlarge, m4.2xlarge,
      m5.large, m5.xlarge, m5.2xlarge,
      c4.large, c4.xlarge, c4.2xlarge,
      c5.large, c5.xlarge, c5.2xlarge,
      r4.large, r4.xlarge, r4.2xlarge
    ]
    Default: m5.xlarge
    ConstraintDescription: Must be a valid EC2 instance type

  # ASG
  ServicesASGMinSize:
    Description: Minimum size of services ECS Auto Scaling Group
    Type: Number
    Default: 3
  ServicesASGMaxSize:
    Description: Maximum size of services ECS Auto Scaling Group
    Type: Number
    Default: 3
  ServicesASGDesiredCapacity:
    Description: Desired Capacity of the services ECS Auto Scaling Group
    Type: Number
    Default: 3
  RollingUpdateMinInService:
    Description: Minimum instance in service during rolling update
    Type: Number
    Default: 2
  ASGEventsTopic:
    Type: String
    Description: SNS topic to notify of ASG events

  # Storage
  ZookeeperDataVolumeSize:
    Type: Number
    Description: Data volume size in GB for Zookeeper nodes
    MinValue: 25
    MaxValue: 250
    Default: 100
    ConstraintDescription: Must be a value between 25 and 250
  BrokerDataVolumeSize:
    Type: Number
    Description: Data volume size in GB for Kafka brokers
    MinValue: 100
    MaxValue: 2000
    Default: 1000
    ConstraintDescription: Must be a value between 100 and 2000
  ServicesDataVolumeSize:
    Type: Number
    Description: Data volume size in GB for Services nodes
    MinValue: 25
    MaxValue: 250
    Default: 100
    ConstraintDescription: Must be a value between 25 and 250

  # ELB
  CertificateArn:
    Type: String
    Description: SSL certificates ARN to assign to ALB (See Certificate Mangager for the ARN)
  InternalCidr0:
    Type: String
    Description: CIDR range to allow access to internal ELB
    Default: ''
  InternalCidr1:
    Type: String
    Description: CIDR range to allow access to internal ELB
    Default: ''
  InternalCidr2:
    Type: String
    Description: CIDR range to allow access to internal ELB
    Default: ''

  # Tags
  Project:
    Description: Project tag
    Type: String
    MinLength: 1
    ConstraintDescription: Must be a non-empty string
  Team:
    Description: Team tag
    Type: String
    MinLength: 1
    ConstraintDescription: Must be a non-empty string
  Environment:
    Description: Environment (dev|sandbox|prod)
    Type: String
    AllowedValues: ['dev','sandbox','prod']
    Default: dev
    ConstraintDescription: Must be one of dev|sandbox|prod.

  KinesisStackName:
    Type: String
    Description: Name of the CF stack used to create the Kinesis stream

  PrivateCaArn:
    Type: String
    Description: the ARN of the Private CA that signs the broker certificate
  KafkaKeyPass:
    Description: Password for the Kafka keystore
    Type: String
    NoEcho: true
    Default: ''
  KafkaTrustPass:
    Description: Password for the Kafka truststore
    Type: String
    NoEcho: true
    Default: ''

Resources:
  # Create a 3-node ECS cluster for Kafka brokers
  ECSBrokers:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: ./ecs-kafka.yaml
      Parameters:
        KeyName: !Ref 'KeyName'
        VPCId: !Ref 'VPCId'
        Subnets: !Join [',', !Ref 'Subnets']
        InstanceType: !Ref 'BrokerInstanceType'
        MaxInstancesPerAsg: 2
        ASGEventsTopic: !Ref 'ASGEventsTopic'
        Project: !Ref 'Project'
        Team: !Ref 'Team'
        Environment: !Ref 'Environment'
        HostedZoneId: !ImportValue
          'Fn::Sub': '${HostedZoneStackName}-ZoneId'
        DomainName: !Ref 'DomainName'
        RollingDeploymentVersion: !Ref 'RollingDeploymentVersion'
        AdditionalSecurityGroup: !GetAtt 'InternalSecurityGroup.GroupId'
        BastionSG: !Ref 'BastionSG'
        ParentStackName: !Ref 'AWS::StackName'
        VolumeNameTag: 'broker-data'
        KinesisStackName: !Ref 'KinesisStackName'
        PrivateCaArn: !Ref 'PrivateCaArn'
        SetupBrokerCerts: 'yes'
        NodeCount: 3
    DependsOn: ['EBSBrokerVolume1','EBSBrokerVolume2','EBSBrokerVolume3']
  EBSBrokerVolume1:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: ./ebs.yaml
      Parameters:
        DataVolumeSize: !Ref 'BrokerDataVolumeSize'
        DataVolumeIOPS: ''
        AvailabilityZone:  !Select [0, !Ref 'AvailabilityZones']
        Project: !Ref Project
        Team: !Ref Team
        Environment: !Ref Environment
        VolumeNameTag: !Sub ${AWS::StackName}-broker-data
        NodeId: '1'
  EBSBrokerVolume2:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: ./ebs.yaml
      Parameters:
        DataVolumeSize: !Ref 'BrokerDataVolumeSize'
        DataVolumeIOPS: ''
        AvailabilityZone: !Select [1, !Ref 'AvailabilityZones']
        Project: !Ref Project
        Team: !Ref Team
        Environment: !Ref Environment
        VolumeNameTag: !Sub '${AWS::StackName}-broker-data'
        NodeId: '2'
  EBSBrokerVolume3:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: ./ebs.yaml
      Parameters:
        DataVolumeSize: !Ref 'BrokerDataVolumeSize'
        DataVolumeIOPS: ''
        AvailabilityZone: !Select [2, !Ref 'AvailabilityZones']
        Project: !Ref Project
        Team: !Ref Team
        Environment: !Ref Environment
        VolumeNameTag: !Sub '${AWS::StackName}-broker-data'
        NodeId: '3'

  # Create a 3-node ECS cluster for Zookeeper nodes
  ECSZK:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: ./ecs-kafka.yaml
      Parameters:
        KeyName: !Ref 'KeyName'
        VPCId: !Ref 'VPCId'
        Subnets: !Join [',', !Ref 'Subnets']
        InstanceType: !Ref 'ZookeeperInstanceType'
        ASGEventsTopic: !Ref 'ASGEventsTopic'
        MaxInstancesPerAsg: 2
        Project: !Ref 'Project'
        Team: !Ref 'Team'
        Environment: !Ref 'Environment'
        HostedZoneId: !ImportValue
          'Fn::Sub': '${HostedZoneStackName}-ZoneId'
        DomainName: !Ref 'DomainName'
        RollingDeploymentVersion: !Ref 'RollingDeploymentVersion'
        AdditionalSecurityGroup: !GetAtt 'InternalSecurityGroup.GroupId'
        BastionSG: !Ref 'BastionSG'
        ParentStackName: !Ref 'AWS::StackName'
        VolumeNameTag: 'zk-data'
        KinesisStackName: !Ref 'KinesisStackName'
        PrivateCaArn: !Ref 'PrivateCaArn'
        SetupBrokerCerts: 'no'
        NodeCount: 3
    DependsOn: ['EBSZKVolume1','EBSZKVolume2','EBSZKVolume3']
  EBSZKVolume1:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: ./ebs.yaml
      Parameters:
        DataVolumeSize: !Ref 'ZookeeperDataVolumeSize'
        DataVolumeIOPS: ''
        AvailabilityZone:  !Select [0, !Ref 'AvailabilityZones']
        Project: !Ref Project
        Team: !Ref Team
        Environment: !Ref Environment
        VolumeNameTag: !Sub '${AWS::StackName}-zk-data'
        NodeId: '1'
  EBSZKVolume2:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: ./ebs.yaml
      Parameters:
        DataVolumeSize: !Ref 'ZookeeperDataVolumeSize'
        DataVolumeIOPS: ''
        AvailabilityZone: !Select [1, !Ref 'AvailabilityZones']
        Project: !Ref Project
        Team: !Ref Team
        Environment: !Ref Environment
        VolumeNameTag: !Sub '${AWS::StackName}-zk-data'
        NodeId: '2'
  EBSZKVolume3:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: ./ebs.yaml
      Parameters:
        DataVolumeSize: !Ref 'ZookeeperDataVolumeSize'
        DataVolumeIOPS: ''
        AvailabilityZone: !Select [2, !Ref 'AvailabilityZones']
        Project: !Ref Project
        Team: !Ref Team
        Environment: !Ref Environment
        VolumeNameTag: !Sub '${AWS::StackName}-zk-data'
        NodeId: '3'

  # Create an autoscaling ECS cluster for services like Schema Registry, Kafka Connect and Rest Proxy
  Services:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: ./services-cluster.yaml
      Parameters:
        KeyName: !Ref 'KeyName'
        VPCId: !Ref 'VPCId'
        PrivateSubnets: !Join [',', !Ref 'Subnets']
        InstanceType: !Ref 'ServicesInstanceType'
        EBSVolumeSize: !Ref 'ServicesDataVolumeSize'
        ASGMinSize: !Ref 'ServicesASGMinSize'
        ASGMaxSize: !Ref 'ServicesASGMaxSize'
        ASGDesiredCapacity: !Ref 'ServicesASGDesiredCapacity'
        RollingUpdateMinInService: !Ref 'RollingUpdateMinInService'
        ASGEventsTopic: !Ref 'ASGEventsTopic'
        Project: !Ref 'Project'
        Team: !Ref 'Team'
        Environment: !Ref 'Environment'
        HostedZoneStackName: !Ref 'HostedZoneStackName'
        RollingDeploymentVersion: !Ref 'RollingDeploymentVersion'
        CertificateArn: !Ref 'CertificateArn'
        TargetGroupPrefix: !Ref 'AWS::StackName'
        InternalCidr0: !Ref 'InternalCidr0'
        InternalCidr1: !Ref 'InternalCidr1'
        InternalCidr2: !Ref 'InternalCidr2'
        KinesisStackName: !Ref 'KinesisStackName'
        HostedZoneStackName: !Ref 'HostedZoneStackName'
        ZookeeperConnectionString: !GetAtt 'Zookeeper.Outputs.ConnectionString'
        KafkaConnectionString: !GetAtt 'Brokers.Outputs.ConnectionString'
        InternalSG: !GetAtt 'InternalSecurityGroup.GroupId'
        StackName: !Ref 'AWS::StackName'
        BastionSG: !Ref 'BastionSG'
    DependsOn: 'ECSBrokers'

  # The Zookeeper Cluster
  Zookeeper:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: ./zookeeper/cluster.yaml
      Parameters:
        Cluster: !GetAtt 'ECSZK.Outputs.ClusterName'
        StackName: !Ref 'AWS::StackName'
        VPCId: !Ref 'VPCId'
        Subnets: !Join [',', !Ref 'Subnets']
        Project: !Ref 'Project'
        Team: !Ref 'Team'
        Environment: !Ref 'Environment'
        DomainName: !Ref 'DomainName'
        DataVolumeMountPath: !GetAtt 'ECSZK.Outputs.EBSMountPath'
        InternalSG: !GetAtt 'InternalSecurityGroup.GroupId'
        KinesisStackName: !Ref 'KinesisStackName'
    DependsOn: 'ECSZK'

  # The Kafka Cluster
  Brokers:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: ./kafka/cluster.yaml
      Parameters:
        Cluster: !GetAtt 'ECSBrokers.Outputs.ClusterName'
        StackName: !Ref 'AWS::StackName'
        VPCId: !Ref 'VPCId'
        Subnets: !Join [',', !Ref 'Subnets']
        ZookeeperConnectionString: !GetAtt 'Zookeeper.Outputs.ConnectionString'
        ZookeeperSecurityGroup: !GetAtt 'Zookeeper.Outputs.ClientZKSG'
        Project: !Ref 'Project'
        Team: !Ref 'Team'
        Environment: !Ref 'Environment'
        DomainName: !Ref 'DomainName'
        DataVolumeMountPath: !GetAtt 'ECSBrokers.Outputs.EBSMountPath'
        InternalSG: !GetAtt 'InternalSecurityGroup.GroupId'
        KinesisStackName: !Ref 'KinesisStackName'
        KafkaKeyPass: !Ref 'KafkaKeyPass'
        KafkaTrustPass: !Ref 'KafkaTrustPass'
    DependsOn: ['ECSBrokers', 'Zookeeper']

  # Security group to allow internal communications for this stack.
  InternalSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref 'VPCId'
      GroupDescription: Allow connections from vpc
      SecurityGroupEgress:
        IpProtocol: -1
        CidrIp: '0.0.0.0/0'

Outputs:
  ClientKafkaSG:
    Description: Allows Client Access to Kafka Brokers
    Value: !GetAtt 'Brokers.Outputs.ClientKafkaSG'
    Export:
      Name: !Sub '${AWS::StackName}-ClientKafkaSG'
  ClientZookeeperSG:
    Description: Allows Client Access to Zookeeper Nodes
    Value: !GetAtt 'Zookeeper.Outputs.ClientZKSG'
    Export:
      Name: !Sub '${AWS::StackName}-ClientZookeeperSG'
  ZookeeperConnectionString:
    Description: 'Comma delimited list of Zookeeper node addresses'
    Value: !GetAtt 'Zookeeper.Outputs.ConnectionString'
    Export:
      Name: !Sub '${AWS::StackName}-ZookeeperConnectionString'
  KafkaConnectionString:
    Description: 'Comma delimited list of Kafka broker addresses'
    Value: !GetAtt 'Brokers.Outputs.ConnectionString'
    Export:
      Name: !Sub '${AWS::StackName}-KafkaConnectionString'
  KafkaSSLConnectionString:
    Description: 'Comma delimited list of Kafka broker addresses'
    Value: !GetAtt 'Brokers.Outputs.SSLConnectionString'
    Export:
      Name: !Sub '${AWS::StackName}-KafkaSSLConnectionString'
  SchemaRegistryURL:
    Description: 'The URL for Kafka Schema Registry'
    Value: !GetAtt 'Services.Outputs.SchemaRegistryURL'
    Export:
      Name: !Sub '${AWS::StackName}-SchemaRegistryURL'
  SchemaRegistryUIURL:
    Description: 'The URL for Kafka Schema Registry'
    Value: !GetAtt 'Services.Outputs.SchemaRegistryUIURL'
    Export:
      Name: !Sub '${AWS::StackName}-SchemaRegistryUIURL'
  RestProxyURL:
    Description: 'The URL for Kafka Rest Proxy'
    Value: !GetAtt 'Services.Outputs.KafkaRestURL'
    Export:
      Name: !Sub '${AWS::StackName}-KafkaRestURL'
  VpcId:
    Description: "Cluster's VPC Id"
    Value: !Ref 'VPCId'
    Export:
      Name: !Sub '${AWS::StackName}-VpcId'
