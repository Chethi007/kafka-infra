---
AWSTemplateFormatVersion: '2010-09-09'

Description: >
  This template deploys a highly available ECS cluster using an AutoScaling Group, with
  ECS hosts distributed across multiple Availability Zones. It then deploys a Zookeeper
  cluster from containers published in Docker Hub.

Parameters:
  # Parameter to force a rolling deployment
  RollingDeploymentVersion:
    Type: Number
    Description: >
      Change this value to force a rolling deployment when there are no changes to
      the launch configuration. Its best to just increment it from the previous value.
    MinValue: 0
    Default: 0
    ConstraintDescription: Must be a non-negative number
  HostedZoneStackName:
    Description: The Stack Name of the hosted zone in which to register services
    Type: String
  KeyName:
    Description: Key Pair name for SSH access
    Type: AWS::EC2::KeyPair::KeyName
  VPCId:
    Description: Choose which VPC this cluster should be deployed to
    Type: AWS::EC2::VPC::Id
  VPCCidrBlock:
    Description: VPC CIDR Block
    Type: String
  Subnets:
    Description: Choose three private subnets this cluster should be deployed to
    Type: List<AWS::EC2::Subnet::Id>
  InstanceType:
    Description: Which instance type should we use to build the ECS clusters
    Type: String
    AllowedValues: [
      m3.large, m3.xlarge, m3.2xlarge,
      m4.large, m4.xlarge, m4.2xlarge,
      m5.large, m5.xlarge, m5.2xlarge,
      c3.large, c3.xlarge, c3.2xlarge,
      c4.large, c4.xlarge, c4.2xlarge,
      c5.large, c5.xlarge, c5.2xlarge,
      r3.large, r3.xlarge, r3.2xlarge,
      r4.large, r4.xlarge, r4.2xlarge,
    ]
    Default: m5.large
    ConstraintDescription: Must be a valid EC2 instance type
  ASGMinSize:
    Description: Minimum size of ECS Auto Scaling Group
    Type: Number
    Default: 3
  ASGMaxSize:
    Description: Maximum size of ECS Auto Scaling Group
    Type: Number
    Default: 3
  ASGDesiredCapacity:
    Description: Desired Capacity of the ECS Auto Scaling Group
    Type: Number
    Default: 3
  RollingUpdateMinInService:
    Description: Minimum instance in service during rolling update
    Type: Number
    Default: 2
  ASGEventsTopic:
    Type: String
    Description: SNS topic to notify of ASG events
  MonitoringCidr:
    Type: String
    Description: CIDR range to allow access for monitoring
    Default: ''
  ZookeeperDataVolumeSize:
    Type: Number
    Description: Data volume size in GB for Zookeeper nodes
    MinValue: 25
    MaxValue: 250
    Default: 100
    ConstraintDescription: Must be a value between 25 and 250
  BrokerDataVolumeSize:
    Type: Number
    Description: Data volume size in GB for Kafka brokers
    MinValue: 100
    MaxValue: 2000
    Default: 1000
    ConstraintDescription: Must be a value between 100 and 2000
  Project:
    Description: Project tag
    Type: String
    MinLength: 1
    ConstraintDescription: Must be a non-empty string
  Team:
    Description: Team tag
    Type: String
    MinLength: 1
    ConstraintDescription: Must be a non-empty string
  Environment:
    Description: Environment (dev|sandbox|prod)
    Type: String
    AllowedValues: ['dev','sandbox','prod']
    Default: dev
    ConstraintDescription: Must be one of dev|sandbox|prod.

Resources:
  ECSBrokers:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: ./ecs.yaml
      Parameters:
        KeyName: !Ref 'KeyName'
        VPCId: !Ref 'VPCId'
        VPCCidrBlock: !Ref 'VPCCidrBlock'
        Subnets: !Join [",", [!Select [0, !Ref 'Subnets'], !Select [1, !Ref 'Subnets'], !Select [2, !Ref 'Subnets']]]
        InstanceType: !Ref 'InstanceType'
        ASGMinSize: !Ref 'ASGMinSize'
        ASGMaxSize: !Ref 'ASGMaxSize'
        ASGDesiredCapacity: !Ref 'ASGDesiredCapacity'
        RollingUpdateMinInService: !Ref 'RollingUpdateMinInService'
        ASGEventsTopic: !Ref 'ASGEventsTopic'
        Project: !Ref 'Project'
        Team: !Ref 'Team'
        Environment: !Ref 'Environment'
        ClusterType: kafka
        HostedZoneId: !ImportValue
          'Fn::Sub': "${HostedZoneStackName}-ZoneId"
        EBSVolumeSize: !Ref 'BrokerDataVolumeSize'
        RollingDeploymentVersion: !Ref 'RollingDeploymentVersion'
  ECSZK:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: ./ecs.yaml
      Parameters:
        KeyName: !Ref 'KeyName'
        VPCId: !Ref 'VPCId'
        VPCCidrBlock: !Ref 'VPCCidrBlock'
        Subnets: !Join [",", [!Select [0, !Ref 'Subnets'], !Select [1, !Ref 'Subnets'], !Select [2, !Ref 'Subnets']]]
        InstanceType: !Ref 'InstanceType'
        ASGMinSize: !Ref 'ASGMinSize'
        ASGMaxSize: !Ref 'ASGMaxSize'
        ASGDesiredCapacity: !Ref 'ASGDesiredCapacity'
        RollingUpdateMinInService: !Ref 'RollingUpdateMinInService'
        ASGEventsTopic: !Ref 'ASGEventsTopic'
        Project: !Ref 'Project'
        Team: !Ref 'Team'
        Environment: !Ref 'Environment'
        ClusterType: kafka
        HostedZoneId: !ImportValue
          'Fn::Sub': "${HostedZoneStackName}-ZoneId"
        EBSVolumeSize: !Ref 'ZookeeperDataVolumeSize'
        RollingDeploymentVersion: !Ref 'RollingDeploymentVersion'
  Zookeeper:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: ./zookeeper/cluster.yaml
      Parameters:
        Cluster: !GetAtt 'ECSZK.Outputs.ClusterName'
        StackName: !Ref 'AWS::StackName'
        VPCId: !Ref 'VPCId'
        Subnets: !Join [",", [!Select [0, !Ref 'Subnets'], !Select [1, !Ref 'Subnets'], !Select [2, !Ref 'Subnets']]]
        Project: !Ref 'Project'
        Team: !Ref 'Team'
        Environment: !Ref 'Environment'
        DomainName: !ImportValue
          'Fn::Sub': "${HostedZoneStackName}-ZoneName"
        MonitoringCidr: !Ref 'MonitoringCidr'
        DataVolumeMountPath: !GetAtt 'ECSZK.Outputs.EBSMountPath'
    DependsOn: 'ECSZK'
  Brokers:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: ./kafka/cluster.yaml
      Parameters:
        Cluster: !GetAtt 'ECSBrokers.Outputs.ClusterName'
        StackName: !Ref 'AWS::StackName'
        VPCId: !Ref 'VPCId'
        Subnets: !Join [",", [!Select [0, !Ref 'Subnets'], !Select [1, !Ref 'Subnets'], !Select [2, !Ref 'Subnets']]]
        ZookeeperConnectionString: !GetAtt 'Zookeeper.Outputs.ConnectionString'
        ZookeeperSecurityGroup: !GetAtt 'Zookeeper.Outputs.ClientZKSG'
        Project: !Ref 'Project'
        Team: !Ref 'Team'
        Environment: !Ref 'Environment'
        DomainName: !ImportValue
          'Fn::Sub': "${HostedZoneStackName}-ZoneName"
        MonitoringCidr: !Ref 'MonitoringCidr'
        DataVolumeMountPath: !GetAtt 'ECSBrokers.Outputs.EBSMountPath'
    DependsOn: ['ECSBrokers', 'Zookeeper']
Outputs:
  ClientKafkaSG:
    Description: Allows Client Access to Kafka Brokers
    Value: !GetAtt 'Brokers.Outputs.ClientKafkaSG'
    Export:
      Name: !Sub '${AWS::StackName}-ClientKafkaSG'
  ClientZookeeperSG:
    Description: Allows Client Access to Zookeeper Nodes
    Value: !GetAtt 'Zookeeper.Outputs.ClientZKSG'
    Export:
      Name: !Sub '${AWS::StackName}-ClientZookeeperSG'
  ZookeeperConnectionString:
    Description: 'Comma delimited list of Zookeeper node addresses'
    Value: !GetAtt 'Zookeeper.Outputs.ConnectionString'
    Export:
      Name: !Sub '${AWS::StackName}-ZookeeperConnectionString'
  KafkaConnectionString:
    Description: 'Comma delimited list of Kafka broker addresses'
    Value: !GetAtt 'Brokers.Outputs.ConnectionString'
    Export:
      Name: !Sub '${AWS::StackName}-KafkaConnectionString'
  VpcId:
    Description: "Cluster's VPC Id"
    Value: !Ref 'VPCId'
    Export:
      Name: !Sub '${AWS::StackName}-VpcId'
